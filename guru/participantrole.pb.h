// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: participantrole.proto

#ifndef PROTOBUF_participantrole_2eproto__INCLUDED
#define PROTOBUF_participantrole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace guru {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_participantrole_2eproto();
void protobuf_AssignDesc_participantrole_2eproto();
void protobuf_ShutdownFile_participantrole_2eproto();

class ParticipantRole;

enum ChampionRole {
  ANY_ROLE = 0,
  TOP = 1,
  MID = 2,
  SUPPORT = 3,
  JUNGLER = 4,
  ADC = 5
};
bool ChampionRole_IsValid(int value);
const ChampionRole ChampionRole_MIN = ANY_ROLE;
const ChampionRole ChampionRole_MAX = ADC;
const int ChampionRole_ARRAYSIZE = ChampionRole_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChampionRole_descriptor();
inline const ::std::string& ChampionRole_Name(ChampionRole value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChampionRole_descriptor(), value);
}
inline bool ChampionRole_Parse(
    const ::std::string& name, ChampionRole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChampionRole>(
    ChampionRole_descriptor(), name, value);
}
// ===================================================================

class ParticipantRole : public ::google::protobuf::Message {
 public:
  ParticipantRole();
  virtual ~ParticipantRole();
  
  ParticipantRole(const ParticipantRole& from);
  
  inline ParticipantRole& operator=(const ParticipantRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticipantRole& default_instance();
  
  void Swap(ParticipantRole* other);
  
  // implements Message ----------------------------------------------
  
  ParticipantRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParticipantRole& from);
  void MergeFrom(const ParticipantRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 participant = 1;
  inline bool has_participant() const;
  inline void clear_participant();
  static const int kParticipantFieldNumber = 1;
  inline ::google::protobuf::uint32 participant() const;
  inline void set_participant(::google::protobuf::uint32 value);
  
  // required .guru.ChampionRole role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline guru::ChampionRole role() const;
  inline void set_role(guru::ChampionRole value);
  
  // @@protoc_insertion_point(class_scope:guru.ParticipantRole)
 private:
  inline void set_has_participant();
  inline void clear_has_participant();
  inline void set_has_role();
  inline void clear_has_role();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 participant_;
  int role_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_participantrole_2eproto();
  friend void protobuf_AssignDesc_participantrole_2eproto();
  friend void protobuf_ShutdownFile_participantrole_2eproto();
  
  void InitAsDefaultInstance();
  static ParticipantRole* default_instance_;
};
// ===================================================================


// ===================================================================

// ParticipantRole

// required uint32 participant = 1;
inline bool ParticipantRole::has_participant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParticipantRole::set_has_participant() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParticipantRole::clear_has_participant() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParticipantRole::clear_participant() {
  participant_ = 0u;
  clear_has_participant();
}
inline ::google::protobuf::uint32 ParticipantRole::participant() const {
  return participant_;
}
inline void ParticipantRole::set_participant(::google::protobuf::uint32 value) {
  set_has_participant();
  participant_ = value;
}

// required .guru.ChampionRole role = 2;
inline bool ParticipantRole::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParticipantRole::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParticipantRole::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParticipantRole::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline guru::ChampionRole ParticipantRole::role() const {
  return static_cast< guru::ChampionRole >(role_);
}
inline void ParticipantRole::set_role(guru::ChampionRole value) {
  GOOGLE_DCHECK(guru::ChampionRole_IsValid(value));
  set_has_role();
  role_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< guru::ChampionRole>() {
  return guru::ChampionRole_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_participantrole_2eproto__INCLUDED
