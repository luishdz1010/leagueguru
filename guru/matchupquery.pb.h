// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchupquery.proto

#ifndef PROTOBUF_matchupquery_2eproto__INCLUDED
#define PROTOBUF_matchupquery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace guru {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_matchupquery_2eproto();
void protobuf_AssignDesc_matchupquery_2eproto();
void protobuf_ShutdownFile_matchupquery_2eproto();

class MatchupQuery;

// ===================================================================

class MatchupQuery : public ::google::protobuf::Message {
 public:
  MatchupQuery();
  virtual ~MatchupQuery();
  
  MatchupQuery(const MatchupQuery& from);
  
  inline MatchupQuery& operator=(const MatchupQuery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchupQuery& default_instance();
  
  void Swap(MatchupQuery* other);
  
  // implements Message ----------------------------------------------
  
  MatchupQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchupQuery& from);
  void MergeFrom(const MatchupQuery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required string roomKey = 2;
  inline bool has_roomkey() const;
  inline void clear_roomkey();
  static const int kRoomKeyFieldNumber = 2;
  inline const ::std::string& roomkey() const;
  inline void set_roomkey(const ::std::string& value);
  inline void set_roomkey(const char* value);
  inline void set_roomkey(const char* value, size_t size);
  inline ::std::string* mutable_roomkey();
  inline ::std::string* release_roomkey();
  
  // optional string editPassword = 3;
  inline bool has_editpassword() const;
  inline void clear_editpassword();
  static const int kEditPasswordFieldNumber = 3;
  inline const ::std::string& editpassword() const;
  inline void set_editpassword(const ::std::string& value);
  inline void set_editpassword(const char* value);
  inline void set_editpassword(const char* value, size_t size);
  inline ::std::string* mutable_editpassword();
  inline ::std::string* release_editpassword();
  
  // @@protoc_insertion_point(class_scope:guru.MatchupQuery)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roomkey();
  inline void clear_has_roomkey();
  inline void set_has_editpassword();
  inline void clear_has_editpassword();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* roomkey_;
  ::std::string* editpassword_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_matchupquery_2eproto();
  friend void protobuf_AssignDesc_matchupquery_2eproto();
  friend void protobuf_ShutdownFile_matchupquery_2eproto();
  
  void InitAsDefaultInstance();
  static MatchupQuery* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchupQuery

// required fixed32 id = 1;
inline bool MatchupQuery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchupQuery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchupQuery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchupQuery::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MatchupQuery::id() const {
  return id_;
}
inline void MatchupQuery::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string roomKey = 2;
inline bool MatchupQuery::has_roomkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchupQuery::set_has_roomkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchupQuery::clear_has_roomkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchupQuery::clear_roomkey() {
  if (roomkey_ != &::google::protobuf::internal::kEmptyString) {
    roomkey_->clear();
  }
  clear_has_roomkey();
}
inline const ::std::string& MatchupQuery::roomkey() const {
  return *roomkey_;
}
inline void MatchupQuery::set_roomkey(const ::std::string& value) {
  set_has_roomkey();
  if (roomkey_ == &::google::protobuf::internal::kEmptyString) {
    roomkey_ = new ::std::string;
  }
  roomkey_->assign(value);
}
inline void MatchupQuery::set_roomkey(const char* value) {
  set_has_roomkey();
  if (roomkey_ == &::google::protobuf::internal::kEmptyString) {
    roomkey_ = new ::std::string;
  }
  roomkey_->assign(value);
}
inline void MatchupQuery::set_roomkey(const char* value, size_t size) {
  set_has_roomkey();
  if (roomkey_ == &::google::protobuf::internal::kEmptyString) {
    roomkey_ = new ::std::string;
  }
  roomkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupQuery::mutable_roomkey() {
  set_has_roomkey();
  if (roomkey_ == &::google::protobuf::internal::kEmptyString) {
    roomkey_ = new ::std::string;
  }
  return roomkey_;
}
inline ::std::string* MatchupQuery::release_roomkey() {
  clear_has_roomkey();
  if (roomkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomkey_;
    roomkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string editPassword = 3;
inline bool MatchupQuery::has_editpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchupQuery::set_has_editpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchupQuery::clear_has_editpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchupQuery::clear_editpassword() {
  if (editpassword_ != &::google::protobuf::internal::kEmptyString) {
    editpassword_->clear();
  }
  clear_has_editpassword();
}
inline const ::std::string& MatchupQuery::editpassword() const {
  return *editpassword_;
}
inline void MatchupQuery::set_editpassword(const ::std::string& value) {
  set_has_editpassword();
  if (editpassword_ == &::google::protobuf::internal::kEmptyString) {
    editpassword_ = new ::std::string;
  }
  editpassword_->assign(value);
}
inline void MatchupQuery::set_editpassword(const char* value) {
  set_has_editpassword();
  if (editpassword_ == &::google::protobuf::internal::kEmptyString) {
    editpassword_ = new ::std::string;
  }
  editpassword_->assign(value);
}
inline void MatchupQuery::set_editpassword(const char* value, size_t size) {
  set_has_editpassword();
  if (editpassword_ == &::google::protobuf::internal::kEmptyString) {
    editpassword_ = new ::std::string;
  }
  editpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupQuery::mutable_editpassword() {
  set_has_editpassword();
  if (editpassword_ == &::google::protobuf::internal::kEmptyString) {
    editpassword_ = new ::std::string;
  }
  return editpassword_;
}
inline ::std::string* MatchupQuery::release_editpassword() {
  clear_has_editpassword();
  if (editpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = editpassword_;
    editpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matchupquery_2eproto__INCLUDED
