// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchupinfo.proto

#ifndef PROTOBUF_matchupinfo_2eproto__INCLUDED
#define PROTOBUF_matchupinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace guru {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_matchupinfo_2eproto();
void protobuf_AssignDesc_matchupinfo_2eproto();
void protobuf_ShutdownFile_matchupinfo_2eproto();

class MatchupInfo;
class MatchupInfo_ParticipantStats;
class MatchupInfo_ParticipantChampionStats;

enum Region {
  NA = 1,
  EUW = 2,
  EUNE = 3,
  BR = 4
};
bool Region_IsValid(int value);
const Region Region_MIN = NA;
const Region Region_MAX = BR;
const int Region_ARRAYSIZE = Region_MAX + 1;

const ::google::protobuf::EnumDescriptor* Region_descriptor();
inline const ::std::string& Region_Name(Region value) {
  return ::google::protobuf::internal::NameOfEnum(
    Region_descriptor(), value);
}
inline bool Region_Parse(
    const ::std::string& name, Region* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Region>(
    Region_descriptor(), name, value);
}
// ===================================================================

class MatchupInfo_ParticipantStats : public ::google::protobuf::Message {
 public:
  MatchupInfo_ParticipantStats();
  virtual ~MatchupInfo_ParticipantStats();
  
  MatchupInfo_ParticipantStats(const MatchupInfo_ParticipantStats& from);
  
  inline MatchupInfo_ParticipantStats& operator=(const MatchupInfo_ParticipantStats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchupInfo_ParticipantStats& default_instance();
  
  void Swap(MatchupInfo_ParticipantStats* other);
  
  // implements Message ----------------------------------------------
  
  MatchupInfo_ParticipantStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchupInfo_ParticipantStats& from);
  void MergeFrom(const MatchupInfo_ParticipantStats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 participantIndex = 1;
  inline bool has_participantindex() const;
  inline void clear_participantindex();
  static const int kParticipantIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 participantindex() const;
  inline void set_participantindex(::google::protobuf::uint32 value);
  
  // required uint32 summonerId = 2;
  inline bool has_summonerid() const;
  inline void clear_summonerid();
  static const int kSummonerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 summonerid() const;
  inline void set_summonerid(::google::protobuf::uint32 value);
  
  // required string summonerName = 3;
  inline bool has_summonername() const;
  inline void clear_summonername();
  static const int kSummonerNameFieldNumber = 3;
  inline const ::std::string& summonername() const;
  inline void set_summonername(const ::std::string& value);
  inline void set_summonername(const char* value);
  inline void set_summonername(const char* value, size_t size);
  inline ::std::string* mutable_summonername();
  inline ::std::string* release_summonername();
  
  // optional uint32 solo5Rating = 4;
  inline bool has_solo5rating() const;
  inline void clear_solo5rating();
  static const int kSolo5RatingFieldNumber = 4;
  inline ::google::protobuf::uint32 solo5rating() const;
  inline void set_solo5rating(::google::protobuf::uint32 value);
  
  // optional uint32 solo5TopRating = 5;
  inline bool has_solo5toprating() const;
  inline void clear_solo5toprating();
  static const int kSolo5TopRatingFieldNumber = 5;
  inline ::google::protobuf::uint32 solo5toprating() const;
  inline void set_solo5toprating(::google::protobuf::uint32 value);
  
  // repeated .guru.MatchupInfo.ParticipantChampionStats championStats = 6;
  inline int championstats_size() const;
  inline void clear_championstats();
  static const int kChampionStatsFieldNumber = 6;
  inline const ::guru::MatchupInfo_ParticipantChampionStats& championstats(int index) const;
  inline ::guru::MatchupInfo_ParticipantChampionStats* mutable_championstats(int index);
  inline ::guru::MatchupInfo_ParticipantChampionStats* add_championstats();
  inline const ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantChampionStats >&
      championstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantChampionStats >*
      mutable_championstats();
  
  // @@protoc_insertion_point(class_scope:guru.MatchupInfo.ParticipantStats)
 private:
  inline void set_has_participantindex();
  inline void clear_has_participantindex();
  inline void set_has_summonerid();
  inline void clear_has_summonerid();
  inline void set_has_summonername();
  inline void clear_has_summonername();
  inline void set_has_solo5rating();
  inline void clear_has_solo5rating();
  inline void set_has_solo5toprating();
  inline void clear_has_solo5toprating();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 participantindex_;
  ::google::protobuf::uint32 summonerid_;
  ::std::string* summonername_;
  ::google::protobuf::uint32 solo5rating_;
  ::google::protobuf::uint32 solo5toprating_;
  ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantChampionStats > championstats_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_matchupinfo_2eproto();
  friend void protobuf_AssignDesc_matchupinfo_2eproto();
  friend void protobuf_ShutdownFile_matchupinfo_2eproto();
  
  void InitAsDefaultInstance();
  static MatchupInfo_ParticipantStats* default_instance_;
};
// -------------------------------------------------------------------

class MatchupInfo_ParticipantChampionStats : public ::google::protobuf::Message {
 public:
  MatchupInfo_ParticipantChampionStats();
  virtual ~MatchupInfo_ParticipantChampionStats();
  
  MatchupInfo_ParticipantChampionStats(const MatchupInfo_ParticipantChampionStats& from);
  
  inline MatchupInfo_ParticipantChampionStats& operator=(const MatchupInfo_ParticipantChampionStats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchupInfo_ParticipantChampionStats& default_instance();
  
  void Swap(MatchupInfo_ParticipantChampionStats* other);
  
  // implements Message ----------------------------------------------
  
  MatchupInfo_ParticipantChampionStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchupInfo_ParticipantChampionStats& from);
  void MergeFrom(const MatchupInfo_ParticipantChampionStats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 championId = 1;
  inline bool has_championid() const;
  inline void clear_championid();
  static const int kChampionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 championid() const;
  inline void set_championid(::google::protobuf::uint32 value);
  
  // optional uint32 wins = 2;
  inline bool has_wins() const;
  inline void clear_wins();
  static const int kWinsFieldNumber = 2;
  inline ::google::protobuf::uint32 wins() const;
  inline void set_wins(::google::protobuf::uint32 value);
  
  // optional uint32 loses = 3;
  inline bool has_loses() const;
  inline void clear_loses();
  static const int kLosesFieldNumber = 3;
  inline ::google::protobuf::uint32 loses() const;
  inline void set_loses(::google::protobuf::uint32 value);
  
  // optional uint32 kills = 4;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 4;
  inline ::google::protobuf::uint32 kills() const;
  inline void set_kills(::google::protobuf::uint32 value);
  
  // optional uint32 deaths = 5;
  inline bool has_deaths() const;
  inline void clear_deaths();
  static const int kDeathsFieldNumber = 5;
  inline ::google::protobuf::uint32 deaths() const;
  inline void set_deaths(::google::protobuf::uint32 value);
  
  // optional uint32 assists = 6;
  inline bool has_assists() const;
  inline void clear_assists();
  static const int kAssistsFieldNumber = 6;
  inline ::google::protobuf::uint32 assists() const;
  inline void set_assists(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:guru.MatchupInfo.ParticipantChampionStats)
 private:
  inline void set_has_championid();
  inline void clear_has_championid();
  inline void set_has_wins();
  inline void clear_has_wins();
  inline void set_has_loses();
  inline void clear_has_loses();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_deaths();
  inline void clear_has_deaths();
  inline void set_has_assists();
  inline void clear_has_assists();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 championid_;
  ::google::protobuf::uint32 wins_;
  ::google::protobuf::uint32 loses_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_matchupinfo_2eproto();
  friend void protobuf_AssignDesc_matchupinfo_2eproto();
  friend void protobuf_ShutdownFile_matchupinfo_2eproto();
  
  void InitAsDefaultInstance();
  static MatchupInfo_ParticipantChampionStats* default_instance_;
};
// -------------------------------------------------------------------

class MatchupInfo : public ::google::protobuf::Message {
 public:
  MatchupInfo();
  virtual ~MatchupInfo();
  
  MatchupInfo(const MatchupInfo& from);
  
  inline MatchupInfo& operator=(const MatchupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchupInfo& default_instance();
  
  void Swap(MatchupInfo* other);
  
  // implements Message ----------------------------------------------
  
  MatchupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchupInfo& from);
  void MergeFrom(const MatchupInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MatchupInfo_ParticipantStats ParticipantStats;
  typedef MatchupInfo_ParticipantChampionStats ParticipantChampionStats;
  
  // accessors -------------------------------------------------------
  
  // required .guru.Region region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline guru::Region region() const;
  inline void set_region(guru::Region value);
  
  // required string gameMode = 2;
  inline bool has_gamemode() const;
  inline void clear_gamemode();
  static const int kGameModeFieldNumber = 2;
  inline const ::std::string& gamemode() const;
  inline void set_gamemode(const ::std::string& value);
  inline void set_gamemode(const char* value);
  inline void set_gamemode(const char* value, size_t size);
  inline ::std::string* mutable_gamemode();
  inline ::std::string* release_gamemode();
  
  // required string gameType = 3;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGameTypeFieldNumber = 3;
  inline const ::std::string& gametype() const;
  inline void set_gametype(const ::std::string& value);
  inline void set_gametype(const char* value);
  inline void set_gametype(const char* value, size_t size);
  inline ::std::string* mutable_gametype();
  inline ::std::string* release_gametype();
  
  // required uint32 mapId = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 4;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);
  
  // required uint32 maxNumPlayers = 5;
  inline bool has_maxnumplayers() const;
  inline void clear_maxnumplayers();
  static const int kMaxNumPlayersFieldNumber = 5;
  inline ::google::protobuf::uint32 maxnumplayers() const;
  inline void set_maxnumplayers(::google::protobuf::uint32 value);
  
  // required uint32 hostPlayer = 6;
  inline bool has_hostplayer() const;
  inline void clear_hostplayer();
  static const int kHostPlayerFieldNumber = 6;
  inline ::google::protobuf::uint32 hostplayer() const;
  inline void set_hostplayer(::google::protobuf::uint32 value);
  
  // optional uint64 riotGameId = 7;
  inline bool has_riotgameid() const;
  inline void clear_riotgameid();
  static const int kRiotGameIdFieldNumber = 7;
  inline ::google::protobuf::uint64 riotgameid() const;
  inline void set_riotgameid(::google::protobuf::uint64 value);
  
  // optional string riotRoomPassword = 8;
  inline bool has_riotroompassword() const;
  inline void clear_riotroompassword();
  static const int kRiotRoomPasswordFieldNumber = 8;
  inline const ::std::string& riotroompassword() const;
  inline void set_riotroompassword(const ::std::string& value);
  inline void set_riotroompassword(const char* value);
  inline void set_riotroompassword(const char* value, size_t size);
  inline ::std::string* mutable_riotroompassword();
  inline ::std::string* release_riotroompassword();
  
  // optional string queueTypeName = 9;
  inline bool has_queuetypename() const;
  inline void clear_queuetypename();
  static const int kQueueTypeNameFieldNumber = 9;
  inline const ::std::string& queuetypename() const;
  inline void set_queuetypename(const ::std::string& value);
  inline void set_queuetypename(const char* value);
  inline void set_queuetypename(const char* value, size_t size);
  inline ::std::string* mutable_queuetypename();
  inline ::std::string* release_queuetypename();
  
  // repeated .guru.MatchupInfo.ParticipantStats participants = 10;
  inline int participants_size() const;
  inline void clear_participants();
  static const int kParticipantsFieldNumber = 10;
  inline const ::guru::MatchupInfo_ParticipantStats& participants(int index) const;
  inline ::guru::MatchupInfo_ParticipantStats* mutable_participants(int index);
  inline ::guru::MatchupInfo_ParticipantStats* add_participants();
  inline const ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantStats >&
      participants() const;
  inline ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantStats >*
      mutable_participants();
  
  // @@protoc_insertion_point(class_scope:guru.MatchupInfo)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_gamemode();
  inline void clear_has_gamemode();
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_maxnumplayers();
  inline void clear_has_maxnumplayers();
  inline void set_has_hostplayer();
  inline void clear_has_hostplayer();
  inline void set_has_riotgameid();
  inline void clear_has_riotgameid();
  inline void set_has_riotroompassword();
  inline void clear_has_riotroompassword();
  inline void set_has_queuetypename();
  inline void clear_has_queuetypename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* gamemode_;
  int region_;
  ::google::protobuf::uint32 mapid_;
  ::std::string* gametype_;
  ::google::protobuf::uint32 maxnumplayers_;
  ::google::protobuf::uint32 hostplayer_;
  ::google::protobuf::uint64 riotgameid_;
  ::std::string* riotroompassword_;
  ::std::string* queuetypename_;
  ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantStats > participants_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_matchupinfo_2eproto();
  friend void protobuf_AssignDesc_matchupinfo_2eproto();
  friend void protobuf_ShutdownFile_matchupinfo_2eproto();
  
  void InitAsDefaultInstance();
  static MatchupInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchupInfo_ParticipantStats

// required uint32 participantIndex = 1;
inline bool MatchupInfo_ParticipantStats::has_participantindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchupInfo_ParticipantStats::set_has_participantindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchupInfo_ParticipantStats::clear_has_participantindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchupInfo_ParticipantStats::clear_participantindex() {
  participantindex_ = 0u;
  clear_has_participantindex();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantStats::participantindex() const {
  return participantindex_;
}
inline void MatchupInfo_ParticipantStats::set_participantindex(::google::protobuf::uint32 value) {
  set_has_participantindex();
  participantindex_ = value;
}

// required uint32 summonerId = 2;
inline bool MatchupInfo_ParticipantStats::has_summonerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchupInfo_ParticipantStats::set_has_summonerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchupInfo_ParticipantStats::clear_has_summonerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchupInfo_ParticipantStats::clear_summonerid() {
  summonerid_ = 0u;
  clear_has_summonerid();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantStats::summonerid() const {
  return summonerid_;
}
inline void MatchupInfo_ParticipantStats::set_summonerid(::google::protobuf::uint32 value) {
  set_has_summonerid();
  summonerid_ = value;
}

// required string summonerName = 3;
inline bool MatchupInfo_ParticipantStats::has_summonername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchupInfo_ParticipantStats::set_has_summonername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchupInfo_ParticipantStats::clear_has_summonername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchupInfo_ParticipantStats::clear_summonername() {
  if (summonername_ != &::google::protobuf::internal::kEmptyString) {
    summonername_->clear();
  }
  clear_has_summonername();
}
inline const ::std::string& MatchupInfo_ParticipantStats::summonername() const {
  return *summonername_;
}
inline void MatchupInfo_ParticipantStats::set_summonername(const ::std::string& value) {
  set_has_summonername();
  if (summonername_ == &::google::protobuf::internal::kEmptyString) {
    summonername_ = new ::std::string;
  }
  summonername_->assign(value);
}
inline void MatchupInfo_ParticipantStats::set_summonername(const char* value) {
  set_has_summonername();
  if (summonername_ == &::google::protobuf::internal::kEmptyString) {
    summonername_ = new ::std::string;
  }
  summonername_->assign(value);
}
inline void MatchupInfo_ParticipantStats::set_summonername(const char* value, size_t size) {
  set_has_summonername();
  if (summonername_ == &::google::protobuf::internal::kEmptyString) {
    summonername_ = new ::std::string;
  }
  summonername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupInfo_ParticipantStats::mutable_summonername() {
  set_has_summonername();
  if (summonername_ == &::google::protobuf::internal::kEmptyString) {
    summonername_ = new ::std::string;
  }
  return summonername_;
}
inline ::std::string* MatchupInfo_ParticipantStats::release_summonername() {
  clear_has_summonername();
  if (summonername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = summonername_;
    summonername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 solo5Rating = 4;
inline bool MatchupInfo_ParticipantStats::has_solo5rating() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchupInfo_ParticipantStats::set_has_solo5rating() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchupInfo_ParticipantStats::clear_has_solo5rating() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchupInfo_ParticipantStats::clear_solo5rating() {
  solo5rating_ = 0u;
  clear_has_solo5rating();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantStats::solo5rating() const {
  return solo5rating_;
}
inline void MatchupInfo_ParticipantStats::set_solo5rating(::google::protobuf::uint32 value) {
  set_has_solo5rating();
  solo5rating_ = value;
}

// optional uint32 solo5TopRating = 5;
inline bool MatchupInfo_ParticipantStats::has_solo5toprating() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchupInfo_ParticipantStats::set_has_solo5toprating() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchupInfo_ParticipantStats::clear_has_solo5toprating() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchupInfo_ParticipantStats::clear_solo5toprating() {
  solo5toprating_ = 0u;
  clear_has_solo5toprating();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantStats::solo5toprating() const {
  return solo5toprating_;
}
inline void MatchupInfo_ParticipantStats::set_solo5toprating(::google::protobuf::uint32 value) {
  set_has_solo5toprating();
  solo5toprating_ = value;
}

// repeated .guru.MatchupInfo.ParticipantChampionStats championStats = 6;
inline int MatchupInfo_ParticipantStats::championstats_size() const {
  return championstats_.size();
}
inline void MatchupInfo_ParticipantStats::clear_championstats() {
  championstats_.Clear();
}
inline const ::guru::MatchupInfo_ParticipantChampionStats& MatchupInfo_ParticipantStats::championstats(int index) const {
  return championstats_.Get(index);
}
inline ::guru::MatchupInfo_ParticipantChampionStats* MatchupInfo_ParticipantStats::mutable_championstats(int index) {
  return championstats_.Mutable(index);
}
inline ::guru::MatchupInfo_ParticipantChampionStats* MatchupInfo_ParticipantStats::add_championstats() {
  return championstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantChampionStats >&
MatchupInfo_ParticipantStats::championstats() const {
  return championstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantChampionStats >*
MatchupInfo_ParticipantStats::mutable_championstats() {
  return &championstats_;
}

// -------------------------------------------------------------------

// MatchupInfo_ParticipantChampionStats

// required uint32 championId = 1;
inline bool MatchupInfo_ParticipantChampionStats::has_championid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchupInfo_ParticipantChampionStats::set_has_championid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_has_championid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_championid() {
  championid_ = 0u;
  clear_has_championid();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantChampionStats::championid() const {
  return championid_;
}
inline void MatchupInfo_ParticipantChampionStats::set_championid(::google::protobuf::uint32 value) {
  set_has_championid();
  championid_ = value;
}

// optional uint32 wins = 2;
inline bool MatchupInfo_ParticipantChampionStats::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchupInfo_ParticipantChampionStats::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantChampionStats::wins() const {
  return wins_;
}
inline void MatchupInfo_ParticipantChampionStats::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
}

// optional uint32 loses = 3;
inline bool MatchupInfo_ParticipantChampionStats::has_loses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchupInfo_ParticipantChampionStats::set_has_loses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_has_loses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_loses() {
  loses_ = 0u;
  clear_has_loses();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantChampionStats::loses() const {
  return loses_;
}
inline void MatchupInfo_ParticipantChampionStats::set_loses(::google::protobuf::uint32 value) {
  set_has_loses();
  loses_ = value;
}

// optional uint32 kills = 4;
inline bool MatchupInfo_ParticipantChampionStats::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchupInfo_ParticipantChampionStats::set_has_kills() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantChampionStats::kills() const {
  return kills_;
}
inline void MatchupInfo_ParticipantChampionStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
}

// optional uint32 deaths = 5;
inline bool MatchupInfo_ParticipantChampionStats::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchupInfo_ParticipantChampionStats::set_has_deaths() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantChampionStats::deaths() const {
  return deaths_;
}
inline void MatchupInfo_ParticipantChampionStats::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
}

// optional uint32 assists = 6;
inline bool MatchupInfo_ParticipantChampionStats::has_assists() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchupInfo_ParticipantChampionStats::set_has_assists() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchupInfo_ParticipantChampionStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 MatchupInfo_ParticipantChampionStats::assists() const {
  return assists_;
}
inline void MatchupInfo_ParticipantChampionStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
}

// -------------------------------------------------------------------

// MatchupInfo

// required .guru.Region region = 1;
inline bool MatchupInfo::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchupInfo::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchupInfo::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchupInfo::clear_region() {
  region_ = 1;
  clear_has_region();
}
inline guru::Region MatchupInfo::region() const {
  return static_cast< guru::Region >(region_);
}
inline void MatchupInfo::set_region(guru::Region value) {
  GOOGLE_DCHECK(guru::Region_IsValid(value));
  set_has_region();
  region_ = value;
}

// required string gameMode = 2;
inline bool MatchupInfo::has_gamemode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchupInfo::set_has_gamemode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchupInfo::clear_has_gamemode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchupInfo::clear_gamemode() {
  if (gamemode_ != &::google::protobuf::internal::kEmptyString) {
    gamemode_->clear();
  }
  clear_has_gamemode();
}
inline const ::std::string& MatchupInfo::gamemode() const {
  return *gamemode_;
}
inline void MatchupInfo::set_gamemode(const ::std::string& value) {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  gamemode_->assign(value);
}
inline void MatchupInfo::set_gamemode(const char* value) {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  gamemode_->assign(value);
}
inline void MatchupInfo::set_gamemode(const char* value, size_t size) {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  gamemode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupInfo::mutable_gamemode() {
  set_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    gamemode_ = new ::std::string;
  }
  return gamemode_;
}
inline ::std::string* MatchupInfo::release_gamemode() {
  clear_has_gamemode();
  if (gamemode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamemode_;
    gamemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string gameType = 3;
inline bool MatchupInfo::has_gametype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchupInfo::set_has_gametype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchupInfo::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchupInfo::clear_gametype() {
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    gametype_->clear();
  }
  clear_has_gametype();
}
inline const ::std::string& MatchupInfo::gametype() const {
  return *gametype_;
}
inline void MatchupInfo::set_gametype(const ::std::string& value) {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::kEmptyString) {
    gametype_ = new ::std::string;
  }
  gametype_->assign(value);
}
inline void MatchupInfo::set_gametype(const char* value) {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::kEmptyString) {
    gametype_ = new ::std::string;
  }
  gametype_->assign(value);
}
inline void MatchupInfo::set_gametype(const char* value, size_t size) {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::kEmptyString) {
    gametype_ = new ::std::string;
  }
  gametype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupInfo::mutable_gametype() {
  set_has_gametype();
  if (gametype_ == &::google::protobuf::internal::kEmptyString) {
    gametype_ = new ::std::string;
  }
  return gametype_;
}
inline ::std::string* MatchupInfo::release_gametype() {
  clear_has_gametype();
  if (gametype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gametype_;
    gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 mapId = 4;
inline bool MatchupInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchupInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchupInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchupInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 MatchupInfo::mapid() const {
  return mapid_;
}
inline void MatchupInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required uint32 maxNumPlayers = 5;
inline bool MatchupInfo::has_maxnumplayers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchupInfo::set_has_maxnumplayers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchupInfo::clear_has_maxnumplayers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchupInfo::clear_maxnumplayers() {
  maxnumplayers_ = 0u;
  clear_has_maxnumplayers();
}
inline ::google::protobuf::uint32 MatchupInfo::maxnumplayers() const {
  return maxnumplayers_;
}
inline void MatchupInfo::set_maxnumplayers(::google::protobuf::uint32 value) {
  set_has_maxnumplayers();
  maxnumplayers_ = value;
}

// required uint32 hostPlayer = 6;
inline bool MatchupInfo::has_hostplayer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchupInfo::set_has_hostplayer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchupInfo::clear_has_hostplayer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchupInfo::clear_hostplayer() {
  hostplayer_ = 0u;
  clear_has_hostplayer();
}
inline ::google::protobuf::uint32 MatchupInfo::hostplayer() const {
  return hostplayer_;
}
inline void MatchupInfo::set_hostplayer(::google::protobuf::uint32 value) {
  set_has_hostplayer();
  hostplayer_ = value;
}

// optional uint64 riotGameId = 7;
inline bool MatchupInfo::has_riotgameid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchupInfo::set_has_riotgameid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchupInfo::clear_has_riotgameid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchupInfo::clear_riotgameid() {
  riotgameid_ = GOOGLE_ULONGLONG(0);
  clear_has_riotgameid();
}
inline ::google::protobuf::uint64 MatchupInfo::riotgameid() const {
  return riotgameid_;
}
inline void MatchupInfo::set_riotgameid(::google::protobuf::uint64 value) {
  set_has_riotgameid();
  riotgameid_ = value;
}

// optional string riotRoomPassword = 8;
inline bool MatchupInfo::has_riotroompassword() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchupInfo::set_has_riotroompassword() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchupInfo::clear_has_riotroompassword() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchupInfo::clear_riotroompassword() {
  if (riotroompassword_ != &::google::protobuf::internal::kEmptyString) {
    riotroompassword_->clear();
  }
  clear_has_riotroompassword();
}
inline const ::std::string& MatchupInfo::riotroompassword() const {
  return *riotroompassword_;
}
inline void MatchupInfo::set_riotroompassword(const ::std::string& value) {
  set_has_riotroompassword();
  if (riotroompassword_ == &::google::protobuf::internal::kEmptyString) {
    riotroompassword_ = new ::std::string;
  }
  riotroompassword_->assign(value);
}
inline void MatchupInfo::set_riotroompassword(const char* value) {
  set_has_riotroompassword();
  if (riotroompassword_ == &::google::protobuf::internal::kEmptyString) {
    riotroompassword_ = new ::std::string;
  }
  riotroompassword_->assign(value);
}
inline void MatchupInfo::set_riotroompassword(const char* value, size_t size) {
  set_has_riotroompassword();
  if (riotroompassword_ == &::google::protobuf::internal::kEmptyString) {
    riotroompassword_ = new ::std::string;
  }
  riotroompassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupInfo::mutable_riotroompassword() {
  set_has_riotroompassword();
  if (riotroompassword_ == &::google::protobuf::internal::kEmptyString) {
    riotroompassword_ = new ::std::string;
  }
  return riotroompassword_;
}
inline ::std::string* MatchupInfo::release_riotroompassword() {
  clear_has_riotroompassword();
  if (riotroompassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = riotroompassword_;
    riotroompassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string queueTypeName = 9;
inline bool MatchupInfo::has_queuetypename() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MatchupInfo::set_has_queuetypename() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MatchupInfo::clear_has_queuetypename() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MatchupInfo::clear_queuetypename() {
  if (queuetypename_ != &::google::protobuf::internal::kEmptyString) {
    queuetypename_->clear();
  }
  clear_has_queuetypename();
}
inline const ::std::string& MatchupInfo::queuetypename() const {
  return *queuetypename_;
}
inline void MatchupInfo::set_queuetypename(const ::std::string& value) {
  set_has_queuetypename();
  if (queuetypename_ == &::google::protobuf::internal::kEmptyString) {
    queuetypename_ = new ::std::string;
  }
  queuetypename_->assign(value);
}
inline void MatchupInfo::set_queuetypename(const char* value) {
  set_has_queuetypename();
  if (queuetypename_ == &::google::protobuf::internal::kEmptyString) {
    queuetypename_ = new ::std::string;
  }
  queuetypename_->assign(value);
}
inline void MatchupInfo::set_queuetypename(const char* value, size_t size) {
  set_has_queuetypename();
  if (queuetypename_ == &::google::protobuf::internal::kEmptyString) {
    queuetypename_ = new ::std::string;
  }
  queuetypename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchupInfo::mutable_queuetypename() {
  set_has_queuetypename();
  if (queuetypename_ == &::google::protobuf::internal::kEmptyString) {
    queuetypename_ = new ::std::string;
  }
  return queuetypename_;
}
inline ::std::string* MatchupInfo::release_queuetypename() {
  clear_has_queuetypename();
  if (queuetypename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queuetypename_;
    queuetypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .guru.MatchupInfo.ParticipantStats participants = 10;
inline int MatchupInfo::participants_size() const {
  return participants_.size();
}
inline void MatchupInfo::clear_participants() {
  participants_.Clear();
}
inline const ::guru::MatchupInfo_ParticipantStats& MatchupInfo::participants(int index) const {
  return participants_.Get(index);
}
inline ::guru::MatchupInfo_ParticipantStats* MatchupInfo::mutable_participants(int index) {
  return participants_.Mutable(index);
}
inline ::guru::MatchupInfo_ParticipantStats* MatchupInfo::add_participants() {
  return participants_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantStats >&
MatchupInfo::participants() const {
  return participants_;
}
inline ::google::protobuf::RepeatedPtrField< ::guru::MatchupInfo_ParticipantStats >*
MatchupInfo::mutable_participants() {
  return &participants_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< guru::Region>() {
  return guru::Region_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matchupinfo_2eproto__INCLUDED
