// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "participantrole.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guru {

namespace {

const ::google::protobuf::Descriptor* ParticipantRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChampionRole_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_participantrole_2eproto() {
  protobuf_AddDesc_participantrole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "participantrole.proto");
  GOOGLE_CHECK(file != NULL);
  ParticipantRole_descriptor_ = file->message_type(0);
  static const int ParticipantRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantRole, participant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantRole, role_),
  };
  ParticipantRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantRole_descriptor_,
      ParticipantRole::default_instance_,
      ParticipantRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantRole));
  ChampionRole_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_participantrole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantRole_descriptor_, &ParticipantRole::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_participantrole_2eproto() {
  delete ParticipantRole::default_instance_;
  delete ParticipantRole_reflection_;
}

void protobuf_AddDesc_participantrole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025participantrole.proto\022\004guru\"H\n\017Partici"
    "pantRole\022\023\n\013participant\030\001 \002(\r\022 \n\004role\030\002 "
    "\002(\0162\022.guru.ChampionRole*Q\n\014ChampionRole\022"
    "\014\n\010ANY_ROLE\020\000\022\007\n\003TOP\020\001\022\007\n\003MID\020\002\022\013\n\007SUPPO"
    "RT\020\003\022\013\n\007JUNGLER\020\004\022\007\n\003ADC\020\005", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "participantrole.proto", &protobuf_RegisterTypes);
  ParticipantRole::default_instance_ = new ParticipantRole();
  ParticipantRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_participantrole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_participantrole_2eproto {
  StaticDescriptorInitializer_participantrole_2eproto() {
    protobuf_AddDesc_participantrole_2eproto();
  }
} static_descriptor_initializer_participantrole_2eproto_;

const ::google::protobuf::EnumDescriptor* ChampionRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChampionRole_descriptor_;
}
bool ChampionRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantRole::kParticipantFieldNumber;
const int ParticipantRole::kRoleFieldNumber;
#endif  // !_MSC_VER

ParticipantRole::ParticipantRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantRole::InitAsDefaultInstance() {
}

ParticipantRole::ParticipantRole(const ParticipantRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantRole::SharedCtor() {
  _cached_size_ = 0;
  participant_ = 0u;
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantRole::~ParticipantRole() {
  SharedDtor();
}

void ParticipantRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParticipantRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantRole_descriptor_;
}

const ParticipantRole& ParticipantRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_participantrole_2eproto();  return *default_instance_;
}

ParticipantRole* ParticipantRole::default_instance_ = NULL;

ParticipantRole* ParticipantRole::New() const {
  return new ParticipantRole;
}

void ParticipantRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    participant_ = 0u;
    role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 participant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &participant_)));
          set_has_participant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }
      
      // required .guru.ChampionRole role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guru::ChampionRole_IsValid(value)) {
            set_role(static_cast< guru::ChampionRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 participant = 1;
  if (has_participant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->participant(), output);
  }
  
  // required .guru.ChampionRole role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 participant = 1;
  if (has_participant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->participant(), target);
  }
  
  // required .guru.ChampionRole role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 participant = 1;
    if (has_participant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->participant());
    }
    
    // required .guru.ChampionRole role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantRole::MergeFrom(const ParticipantRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participant()) {
      set_participant(from.participant());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantRole::CopyFrom(const ParticipantRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ParticipantRole::Swap(ParticipantRole* other) {
  if (other != this) {
    std::swap(participant_, other->participant_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantRole_descriptor_;
  metadata.reflection = ParticipantRole_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

// @@protoc_insertion_point(global_scope)
