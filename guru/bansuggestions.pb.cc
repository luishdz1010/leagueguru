// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bansuggestions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guru {

namespace {

const ::google::protobuf::Descriptor* BanSuggestions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanSuggestions_reflection_ = NULL;
const ::google::protobuf::Descriptor* BanSuggestions_Suggestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BanSuggestions_Suggestion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bansuggestions_2eproto() {
  protobuf_AddDesc_bansuggestions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bansuggestions.proto");
  GOOGLE_CHECK(file != NULL);
  BanSuggestions_descriptor_ = file->message_type(0);
  static const int BanSuggestions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions, suggestions_),
  };
  BanSuggestions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BanSuggestions_descriptor_,
      BanSuggestions::default_instance_,
      BanSuggestions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BanSuggestions));
  BanSuggestions_Suggestion_descriptor_ = BanSuggestions_descriptor_->nested_type(0);
  static const int BanSuggestions_Suggestion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions_Suggestion, championid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions_Suggestion, winrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions_Suggestion, totalgames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions_Suggestion, popularity_),
  };
  BanSuggestions_Suggestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BanSuggestions_Suggestion_descriptor_,
      BanSuggestions_Suggestion::default_instance_,
      BanSuggestions_Suggestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions_Suggestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanSuggestions_Suggestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BanSuggestions_Suggestion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bansuggestions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BanSuggestions_descriptor_, &BanSuggestions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BanSuggestions_Suggestion_descriptor_, &BanSuggestions_Suggestion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bansuggestions_2eproto() {
  delete BanSuggestions::default_instance_;
  delete BanSuggestions_reflection_;
  delete BanSuggestions_Suggestion::default_instance_;
  delete BanSuggestions_Suggestion_reflection_;
}

void protobuf_AddDesc_bansuggestions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024bansuggestions.proto\022\004guru\"\241\001\n\016BanSugg"
    "estions\0224\n\013suggestions\030\001 \003(\0132\037.guru.BanS"
    "uggestions.Suggestion\032Y\n\nSuggestion\022\022\n\nc"
    "hampionId\030\001 \002(\r\022\017\n\007winrate\030\002 \002(\001\022\022\n\ntota"
    "lGames\030\003 \002(\r\022\022\n\npopularity\030\004 \001(\001", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bansuggestions.proto", &protobuf_RegisterTypes);
  BanSuggestions::default_instance_ = new BanSuggestions();
  BanSuggestions_Suggestion::default_instance_ = new BanSuggestions_Suggestion();
  BanSuggestions::default_instance_->InitAsDefaultInstance();
  BanSuggestions_Suggestion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bansuggestions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bansuggestions_2eproto {
  StaticDescriptorInitializer_bansuggestions_2eproto() {
    protobuf_AddDesc_bansuggestions_2eproto();
  }
} static_descriptor_initializer_bansuggestions_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BanSuggestions_Suggestion::kChampionIdFieldNumber;
const int BanSuggestions_Suggestion::kWinrateFieldNumber;
const int BanSuggestions_Suggestion::kTotalGamesFieldNumber;
const int BanSuggestions_Suggestion::kPopularityFieldNumber;
#endif  // !_MSC_VER

BanSuggestions_Suggestion::BanSuggestions_Suggestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BanSuggestions_Suggestion::InitAsDefaultInstance() {
}

BanSuggestions_Suggestion::BanSuggestions_Suggestion(const BanSuggestions_Suggestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BanSuggestions_Suggestion::SharedCtor() {
  _cached_size_ = 0;
  championid_ = 0u;
  winrate_ = 0;
  totalgames_ = 0u;
  popularity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanSuggestions_Suggestion::~BanSuggestions_Suggestion() {
  SharedDtor();
}

void BanSuggestions_Suggestion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BanSuggestions_Suggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanSuggestions_Suggestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanSuggestions_Suggestion_descriptor_;
}

const BanSuggestions_Suggestion& BanSuggestions_Suggestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bansuggestions_2eproto();  return *default_instance_;
}

BanSuggestions_Suggestion* BanSuggestions_Suggestion::default_instance_ = NULL;

BanSuggestions_Suggestion* BanSuggestions_Suggestion::New() const {
  return new BanSuggestions_Suggestion;
}

void BanSuggestions_Suggestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    championid_ = 0u;
    winrate_ = 0;
    totalgames_ = 0u;
    popularity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BanSuggestions_Suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 championId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &championid_)));
          set_has_championid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_winrate;
        break;
      }
      
      // required double winrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_winrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalGames;
        break;
      }
      
      // required uint32 totalGames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalGames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalgames_)));
          set_has_totalgames();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_popularity;
        break;
      }
      
      // optional double popularity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BanSuggestions_Suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->championid(), output);
  }
  
  // required double winrate = 2;
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->winrate(), output);
  }
  
  // required uint32 totalGames = 3;
  if (has_totalgames()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalgames(), output);
  }
  
  // optional double popularity = 4;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->popularity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BanSuggestions_Suggestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->championid(), target);
  }
  
  // required double winrate = 2;
  if (has_winrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->winrate(), target);
  }
  
  // required uint32 totalGames = 3;
  if (has_totalgames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalgames(), target);
  }
  
  // optional double popularity = 4;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->popularity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BanSuggestions_Suggestion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 championId = 1;
    if (has_championid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->championid());
    }
    
    // required double winrate = 2;
    if (has_winrate()) {
      total_size += 1 + 8;
    }
    
    // required uint32 totalGames = 3;
    if (has_totalgames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalgames());
    }
    
    // optional double popularity = 4;
    if (has_popularity()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanSuggestions_Suggestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BanSuggestions_Suggestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BanSuggestions_Suggestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BanSuggestions_Suggestion::MergeFrom(const BanSuggestions_Suggestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_championid()) {
      set_championid(from.championid());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
    if (from.has_totalgames()) {
      set_totalgames(from.totalgames());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BanSuggestions_Suggestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanSuggestions_Suggestion::CopyFrom(const BanSuggestions_Suggestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanSuggestions_Suggestion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BanSuggestions_Suggestion::Swap(BanSuggestions_Suggestion* other) {
  if (other != this) {
    std::swap(championid_, other->championid_);
    std::swap(winrate_, other->winrate_);
    std::swap(totalgames_, other->totalgames_);
    std::swap(popularity_, other->popularity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BanSuggestions_Suggestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanSuggestions_Suggestion_descriptor_;
  metadata.reflection = BanSuggestions_Suggestion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BanSuggestions::kSuggestionsFieldNumber;
#endif  // !_MSC_VER

BanSuggestions::BanSuggestions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BanSuggestions::InitAsDefaultInstance() {
}

BanSuggestions::BanSuggestions(const BanSuggestions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BanSuggestions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BanSuggestions::~BanSuggestions() {
  SharedDtor();
}

void BanSuggestions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BanSuggestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BanSuggestions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BanSuggestions_descriptor_;
}

const BanSuggestions& BanSuggestions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bansuggestions_2eproto();  return *default_instance_;
}

BanSuggestions* BanSuggestions::default_instance_ = NULL;

BanSuggestions* BanSuggestions::New() const {
  return new BanSuggestions;
}

void BanSuggestions::Clear() {
  suggestions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BanSuggestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .guru.BanSuggestions.Suggestion suggestions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suggestions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_suggestions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BanSuggestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .guru.BanSuggestions.Suggestion suggestions = 1;
  for (int i = 0; i < this->suggestions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->suggestions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BanSuggestions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .guru.BanSuggestions.Suggestion suggestions = 1;
  for (int i = 0; i < this->suggestions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->suggestions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BanSuggestions::ByteSize() const {
  int total_size = 0;
  
  // repeated .guru.BanSuggestions.Suggestion suggestions = 1;
  total_size += 1 * this->suggestions_size();
  for (int i = 0; i < this->suggestions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suggestions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BanSuggestions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BanSuggestions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BanSuggestions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BanSuggestions::MergeFrom(const BanSuggestions& from) {
  GOOGLE_CHECK_NE(&from, this);
  suggestions_.MergeFrom(from.suggestions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BanSuggestions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanSuggestions::CopyFrom(const BanSuggestions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanSuggestions::IsInitialized() const {
  
  for (int i = 0; i < suggestions_size(); i++) {
    if (!this->suggestions(i).IsInitialized()) return false;
  }
  return true;
}

void BanSuggestions::Swap(BanSuggestions* other) {
  if (other != this) {
    suggestions_.Swap(&other->suggestions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BanSuggestions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BanSuggestions_descriptor_;
  metadata.reflection = BanSuggestions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

// @@protoc_insertion_point(global_scope)
