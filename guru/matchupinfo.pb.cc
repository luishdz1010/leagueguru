// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "matchupinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guru {

namespace {

const ::google::protobuf::Descriptor* MatchupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchupInfo_ParticipantStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupInfo_ParticipantStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchupInfo_ParticipantChampionStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupInfo_ParticipantChampionStats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Region_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_matchupinfo_2eproto() {
  protobuf_AddDesc_matchupinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "matchupinfo.proto");
  GOOGLE_CHECK(file != NULL);
  MatchupInfo_descriptor_ = file->message_type(0);
  static const int MatchupInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, maxnumplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, hostplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, riotgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, riotroompassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, queuetypename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, participants_),
  };
  MatchupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupInfo_descriptor_,
      MatchupInfo::default_instance_,
      MatchupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupInfo));
  MatchupInfo_ParticipantStats_descriptor_ = MatchupInfo_descriptor_->nested_type(0);
  static const int MatchupInfo_ParticipantStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, participantindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, summonerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, summonername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, solo5rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, solo5toprating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, championstats_),
  };
  MatchupInfo_ParticipantStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupInfo_ParticipantStats_descriptor_,
      MatchupInfo_ParticipantStats::default_instance_,
      MatchupInfo_ParticipantStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupInfo_ParticipantStats));
  MatchupInfo_ParticipantChampionStats_descriptor_ = MatchupInfo_descriptor_->nested_type(1);
  static const int MatchupInfo_ParticipantChampionStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, championid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, loses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, assists_),
  };
  MatchupInfo_ParticipantChampionStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupInfo_ParticipantChampionStats_descriptor_,
      MatchupInfo_ParticipantChampionStats::default_instance_,
      MatchupInfo_ParticipantChampionStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupInfo_ParticipantChampionStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupInfo_ParticipantChampionStats));
  Region_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_matchupinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupInfo_descriptor_, &MatchupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupInfo_ParticipantStats_descriptor_, &MatchupInfo_ParticipantStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupInfo_ParticipantChampionStats_descriptor_, &MatchupInfo_ParticipantChampionStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_matchupinfo_2eproto() {
  delete MatchupInfo::default_instance_;
  delete MatchupInfo_reflection_;
  delete MatchupInfo_ParticipantStats::default_instance_;
  delete MatchupInfo_ParticipantStats_reflection_;
  delete MatchupInfo_ParticipantChampionStats::default_instance_;
  delete MatchupInfo_ParticipantChampionStats_reflection_;
}

void protobuf_AddDesc_matchupinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021matchupinfo.proto\022\004guru\"\316\004\n\013MatchupInf"
    "o\022\034\n\006region\030\001 \002(\0162\014.guru.Region\022\020\n\010gameM"
    "ode\030\002 \002(\t\022\020\n\010gameType\030\003 \002(\t\022\r\n\005mapId\030\004 \002"
    "(\r\022\025\n\rmaxNumPlayers\030\005 \002(\r\022\022\n\nhostPlayer\030"
    "\006 \002(\r\022\022\n\nriotGameId\030\007 \001(\004\022\030\n\020riotRoomPas"
    "sword\030\010 \001(\t\022\025\n\rqueueTypeName\030\t \001(\t\0228\n\014pa"
    "rticipants\030\n \003(\0132\".guru.MatchupInfo.Part"
    "icipantStats\032\306\001\n\020ParticipantStats\022\030\n\020par"
    "ticipantIndex\030\001 \002(\r\022\022\n\nsummonerId\030\002 \002(\r\022"
    "\024\n\014summonerName\030\003 \002(\t\022\023\n\013solo5Rating\030\004 \001"
    "(\r\022\026\n\016solo5TopRating\030\005 \001(\r\022A\n\rchampionSt"
    "ats\030\006 \003(\0132*.guru.MatchupInfo.Participant"
    "ChampionStats\032{\n\030ParticipantChampionStat"
    "s\022\022\n\nchampionId\030\001 \002(\r\022\014\n\004wins\030\002 \001(\r\022\r\n\005l"
    "oses\030\003 \001(\r\022\r\n\005kills\030\004 \001(\r\022\016\n\006deaths\030\005 \001("
    "\r\022\017\n\007assists\030\006 \001(\r*+\n\006Region\022\006\n\002NA\020\001\022\007\n\003"
    "EUW\020\002\022\010\n\004EUNE\020\003\022\006\n\002BR\020\004", 663);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "matchupinfo.proto", &protobuf_RegisterTypes);
  MatchupInfo::default_instance_ = new MatchupInfo();
  MatchupInfo_ParticipantStats::default_instance_ = new MatchupInfo_ParticipantStats();
  MatchupInfo_ParticipantChampionStats::default_instance_ = new MatchupInfo_ParticipantChampionStats();
  MatchupInfo::default_instance_->InitAsDefaultInstance();
  MatchupInfo_ParticipantStats::default_instance_->InitAsDefaultInstance();
  MatchupInfo_ParticipantChampionStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_matchupinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_matchupinfo_2eproto {
  StaticDescriptorInitializer_matchupinfo_2eproto() {
    protobuf_AddDesc_matchupinfo_2eproto();
  }
} static_descriptor_initializer_matchupinfo_2eproto_;

const ::google::protobuf::EnumDescriptor* Region_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_descriptor_;
}
bool Region_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MatchupInfo_ParticipantStats::kParticipantIndexFieldNumber;
const int MatchupInfo_ParticipantStats::kSummonerIdFieldNumber;
const int MatchupInfo_ParticipantStats::kSummonerNameFieldNumber;
const int MatchupInfo_ParticipantStats::kSolo5RatingFieldNumber;
const int MatchupInfo_ParticipantStats::kSolo5TopRatingFieldNumber;
const int MatchupInfo_ParticipantStats::kChampionStatsFieldNumber;
#endif  // !_MSC_VER

MatchupInfo_ParticipantStats::MatchupInfo_ParticipantStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupInfo_ParticipantStats::InitAsDefaultInstance() {
}

MatchupInfo_ParticipantStats::MatchupInfo_ParticipantStats(const MatchupInfo_ParticipantStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupInfo_ParticipantStats::SharedCtor() {
  _cached_size_ = 0;
  participantindex_ = 0u;
  summonerid_ = 0u;
  summonername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  solo5rating_ = 0u;
  solo5toprating_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupInfo_ParticipantStats::~MatchupInfo_ParticipantStats() {
  SharedDtor();
}

void MatchupInfo_ParticipantStats::SharedDtor() {
  if (summonername_ != &::google::protobuf::internal::kEmptyString) {
    delete summonername_;
  }
  if (this != default_instance_) {
  }
}

void MatchupInfo_ParticipantStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupInfo_ParticipantStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupInfo_ParticipantStats_descriptor_;
}

const MatchupInfo_ParticipantStats& MatchupInfo_ParticipantStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matchupinfo_2eproto();  return *default_instance_;
}

MatchupInfo_ParticipantStats* MatchupInfo_ParticipantStats::default_instance_ = NULL;

MatchupInfo_ParticipantStats* MatchupInfo_ParticipantStats::New() const {
  return new MatchupInfo_ParticipantStats;
}

void MatchupInfo_ParticipantStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    participantindex_ = 0u;
    summonerid_ = 0u;
    if (has_summonername()) {
      if (summonername_ != &::google::protobuf::internal::kEmptyString) {
        summonername_->clear();
      }
    }
    solo5rating_ = 0u;
    solo5toprating_ = 0u;
  }
  championstats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupInfo_ParticipantStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 participantIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &participantindex_)));
          set_has_participantindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_summonerId;
        break;
      }
      
      // required uint32 summonerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summonerid_)));
          set_has_summonerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_summonerName;
        break;
      }
      
      // required string summonerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summonerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summonername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->summonername().data(), this->summonername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_solo5Rating;
        break;
      }
      
      // optional uint32 solo5Rating = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo5Rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo5rating_)));
          set_has_solo5rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_solo5TopRating;
        break;
      }
      
      // optional uint32 solo5TopRating = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solo5TopRating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo5toprating_)));
          set_has_solo5toprating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_championStats;
        break;
      }
      
      // repeated .guru.MatchupInfo.ParticipantChampionStats championStats = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_championStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_championstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_championStats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchupInfo_ParticipantStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 participantIndex = 1;
  if (has_participantindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->participantindex(), output);
  }
  
  // required uint32 summonerId = 2;
  if (has_summonerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->summonerid(), output);
  }
  
  // required string summonerName = 3;
  if (has_summonername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summonername().data(), this->summonername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->summonername(), output);
  }
  
  // optional uint32 solo5Rating = 4;
  if (has_solo5rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->solo5rating(), output);
  }
  
  // optional uint32 solo5TopRating = 5;
  if (has_solo5toprating()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->solo5toprating(), output);
  }
  
  // repeated .guru.MatchupInfo.ParticipantChampionStats championStats = 6;
  for (int i = 0; i < this->championstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->championstats(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupInfo_ParticipantStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 participantIndex = 1;
  if (has_participantindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->participantindex(), target);
  }
  
  // required uint32 summonerId = 2;
  if (has_summonerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->summonerid(), target);
  }
  
  // required string summonerName = 3;
  if (has_summonername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summonername().data(), this->summonername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->summonername(), target);
  }
  
  // optional uint32 solo5Rating = 4;
  if (has_solo5rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->solo5rating(), target);
  }
  
  // optional uint32 solo5TopRating = 5;
  if (has_solo5toprating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->solo5toprating(), target);
  }
  
  // repeated .guru.MatchupInfo.ParticipantChampionStats championStats = 6;
  for (int i = 0; i < this->championstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->championstats(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupInfo_ParticipantStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 participantIndex = 1;
    if (has_participantindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->participantindex());
    }
    
    // required uint32 summonerId = 2;
    if (has_summonerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summonerid());
    }
    
    // required string summonerName = 3;
    if (has_summonername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summonername());
    }
    
    // optional uint32 solo5Rating = 4;
    if (has_solo5rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo5rating());
    }
    
    // optional uint32 solo5TopRating = 5;
    if (has_solo5toprating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo5toprating());
    }
    
  }
  // repeated .guru.MatchupInfo.ParticipantChampionStats championStats = 6;
  total_size += 1 * this->championstats_size();
  for (int i = 0; i < this->championstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->championstats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupInfo_ParticipantStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupInfo_ParticipantStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupInfo_ParticipantStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupInfo_ParticipantStats::MergeFrom(const MatchupInfo_ParticipantStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  championstats_.MergeFrom(from.championstats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participantindex()) {
      set_participantindex(from.participantindex());
    }
    if (from.has_summonerid()) {
      set_summonerid(from.summonerid());
    }
    if (from.has_summonername()) {
      set_summonername(from.summonername());
    }
    if (from.has_solo5rating()) {
      set_solo5rating(from.solo5rating());
    }
    if (from.has_solo5toprating()) {
      set_solo5toprating(from.solo5toprating());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupInfo_ParticipantStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupInfo_ParticipantStats::CopyFrom(const MatchupInfo_ParticipantStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupInfo_ParticipantStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < championstats_size(); i++) {
    if (!this->championstats(i).IsInitialized()) return false;
  }
  return true;
}

void MatchupInfo_ParticipantStats::Swap(MatchupInfo_ParticipantStats* other) {
  if (other != this) {
    std::swap(participantindex_, other->participantindex_);
    std::swap(summonerid_, other->summonerid_);
    std::swap(summonername_, other->summonername_);
    std::swap(solo5rating_, other->solo5rating_);
    std::swap(solo5toprating_, other->solo5toprating_);
    championstats_.Swap(&other->championstats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupInfo_ParticipantStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupInfo_ParticipantStats_descriptor_;
  metadata.reflection = MatchupInfo_ParticipantStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MatchupInfo_ParticipantChampionStats::kChampionIdFieldNumber;
const int MatchupInfo_ParticipantChampionStats::kWinsFieldNumber;
const int MatchupInfo_ParticipantChampionStats::kLosesFieldNumber;
const int MatchupInfo_ParticipantChampionStats::kKillsFieldNumber;
const int MatchupInfo_ParticipantChampionStats::kDeathsFieldNumber;
const int MatchupInfo_ParticipantChampionStats::kAssistsFieldNumber;
#endif  // !_MSC_VER

MatchupInfo_ParticipantChampionStats::MatchupInfo_ParticipantChampionStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupInfo_ParticipantChampionStats::InitAsDefaultInstance() {
}

MatchupInfo_ParticipantChampionStats::MatchupInfo_ParticipantChampionStats(const MatchupInfo_ParticipantChampionStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupInfo_ParticipantChampionStats::SharedCtor() {
  _cached_size_ = 0;
  championid_ = 0u;
  wins_ = 0u;
  loses_ = 0u;
  kills_ = 0u;
  deaths_ = 0u;
  assists_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupInfo_ParticipantChampionStats::~MatchupInfo_ParticipantChampionStats() {
  SharedDtor();
}

void MatchupInfo_ParticipantChampionStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchupInfo_ParticipantChampionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupInfo_ParticipantChampionStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupInfo_ParticipantChampionStats_descriptor_;
}

const MatchupInfo_ParticipantChampionStats& MatchupInfo_ParticipantChampionStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matchupinfo_2eproto();  return *default_instance_;
}

MatchupInfo_ParticipantChampionStats* MatchupInfo_ParticipantChampionStats::default_instance_ = NULL;

MatchupInfo_ParticipantChampionStats* MatchupInfo_ParticipantChampionStats::New() const {
  return new MatchupInfo_ParticipantChampionStats;
}

void MatchupInfo_ParticipantChampionStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    championid_ = 0u;
    wins_ = 0u;
    loses_ = 0u;
    kills_ = 0u;
    deaths_ = 0u;
    assists_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupInfo_ParticipantChampionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 championId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &championid_)));
          set_has_championid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wins;
        break;
      }
      
      // optional uint32 wins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loses;
        break;
      }
      
      // optional uint32 loses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loses_)));
          set_has_loses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kills;
        break;
      }
      
      // optional uint32 kills = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deaths;
        break;
      }
      
      // optional uint32 deaths = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_assists;
        break;
      }
      
      // optional uint32 assists = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchupInfo_ParticipantChampionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->championid(), output);
  }
  
  // optional uint32 wins = 2;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wins(), output);
  }
  
  // optional uint32 loses = 3;
  if (has_loses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loses(), output);
  }
  
  // optional uint32 kills = 4;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kills(), output);
  }
  
  // optional uint32 deaths = 5;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deaths(), output);
  }
  
  // optional uint32 assists = 6;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->assists(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupInfo_ParticipantChampionStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->championid(), target);
  }
  
  // optional uint32 wins = 2;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wins(), target);
  }
  
  // optional uint32 loses = 3;
  if (has_loses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loses(), target);
  }
  
  // optional uint32 kills = 4;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kills(), target);
  }
  
  // optional uint32 deaths = 5;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deaths(), target);
  }
  
  // optional uint32 assists = 6;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->assists(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupInfo_ParticipantChampionStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 championId = 1;
    if (has_championid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->championid());
    }
    
    // optional uint32 wins = 2;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }
    
    // optional uint32 loses = 3;
    if (has_loses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loses());
    }
    
    // optional uint32 kills = 4;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }
    
    // optional uint32 deaths = 5;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }
    
    // optional uint32 assists = 6;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupInfo_ParticipantChampionStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupInfo_ParticipantChampionStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupInfo_ParticipantChampionStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupInfo_ParticipantChampionStats::MergeFrom(const MatchupInfo_ParticipantChampionStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_championid()) {
      set_championid(from.championid());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_loses()) {
      set_loses(from.loses());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupInfo_ParticipantChampionStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupInfo_ParticipantChampionStats::CopyFrom(const MatchupInfo_ParticipantChampionStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupInfo_ParticipantChampionStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MatchupInfo_ParticipantChampionStats::Swap(MatchupInfo_ParticipantChampionStats* other) {
  if (other != this) {
    std::swap(championid_, other->championid_);
    std::swap(wins_, other->wins_);
    std::swap(loses_, other->loses_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(assists_, other->assists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupInfo_ParticipantChampionStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupInfo_ParticipantChampionStats_descriptor_;
  metadata.reflection = MatchupInfo_ParticipantChampionStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MatchupInfo::kRegionFieldNumber;
const int MatchupInfo::kGameModeFieldNumber;
const int MatchupInfo::kGameTypeFieldNumber;
const int MatchupInfo::kMapIdFieldNumber;
const int MatchupInfo::kMaxNumPlayersFieldNumber;
const int MatchupInfo::kHostPlayerFieldNumber;
const int MatchupInfo::kRiotGameIdFieldNumber;
const int MatchupInfo::kRiotRoomPasswordFieldNumber;
const int MatchupInfo::kQueueTypeNameFieldNumber;
const int MatchupInfo::kParticipantsFieldNumber;
#endif  // !_MSC_VER

MatchupInfo::MatchupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupInfo::InitAsDefaultInstance() {
}

MatchupInfo::MatchupInfo(const MatchupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupInfo::SharedCtor() {
  _cached_size_ = 0;
  region_ = 1;
  gamemode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0u;
  maxnumplayers_ = 0u;
  hostplayer_ = 0u;
  riotgameid_ = GOOGLE_ULONGLONG(0);
  riotroompassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  queuetypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupInfo::~MatchupInfo() {
  SharedDtor();
}

void MatchupInfo::SharedDtor() {
  if (gamemode_ != &::google::protobuf::internal::kEmptyString) {
    delete gamemode_;
  }
  if (gametype_ != &::google::protobuf::internal::kEmptyString) {
    delete gametype_;
  }
  if (riotroompassword_ != &::google::protobuf::internal::kEmptyString) {
    delete riotroompassword_;
  }
  if (queuetypename_ != &::google::protobuf::internal::kEmptyString) {
    delete queuetypename_;
  }
  if (this != default_instance_) {
  }
}

void MatchupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupInfo_descriptor_;
}

const MatchupInfo& MatchupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matchupinfo_2eproto();  return *default_instance_;
}

MatchupInfo* MatchupInfo::default_instance_ = NULL;

MatchupInfo* MatchupInfo::New() const {
  return new MatchupInfo;
}

void MatchupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 1;
    if (has_gamemode()) {
      if (gamemode_ != &::google::protobuf::internal::kEmptyString) {
        gamemode_->clear();
      }
    }
    if (has_gametype()) {
      if (gametype_ != &::google::protobuf::internal::kEmptyString) {
        gametype_->clear();
      }
    }
    mapid_ = 0u;
    maxnumplayers_ = 0u;
    hostplayer_ = 0u;
    riotgameid_ = GOOGLE_ULONGLONG(0);
    if (has_riotroompassword()) {
      if (riotroompassword_ != &::google::protobuf::internal::kEmptyString) {
        riotroompassword_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_queuetypename()) {
      if (queuetypename_ != &::google::protobuf::internal::kEmptyString) {
        queuetypename_->clear();
      }
    }
  }
  participants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .guru.Region region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guru::Region_IsValid(value)) {
            set_region(static_cast< guru::Region >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameMode;
        break;
      }
      
      // required string gameMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamemode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamemode().data(), this->gamemode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameType;
        break;
      }
      
      // required string gameType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapId;
        break;
      }
      
      // required uint32 mapId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxNumPlayers;
        break;
      }
      
      // required uint32 maxNumPlayers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNumPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnumplayers_)));
          set_has_maxnumplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hostPlayer;
        break;
      }
      
      // required uint32 hostPlayer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hostPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostplayer_)));
          set_has_hostplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_riotGameId;
        break;
      }
      
      // optional uint64 riotGameId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_riotGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &riotgameid_)));
          set_has_riotgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_riotRoomPassword;
        break;
      }
      
      // optional string riotRoomPassword = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_riotRoomPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riotroompassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->riotroompassword().data(), this->riotroompassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_queueTypeName;
        break;
      }
      
      // optional string queueTypeName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queueTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queuetypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queuetypename().data(), this->queuetypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_participants;
        break;
      }
      
      // repeated .guru.MatchupInfo.ParticipantStats participants = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_participants;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .guru.Region region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }
  
  // required string gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamemode().data(), this->gamemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gamemode(), output);
  }
  
  // required string gameType = 3;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gametype(), output);
  }
  
  // required uint32 mapId = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }
  
  // required uint32 maxNumPlayers = 5;
  if (has_maxnumplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxnumplayers(), output);
  }
  
  // required uint32 hostPlayer = 6;
  if (has_hostplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hostplayer(), output);
  }
  
  // optional uint64 riotGameId = 7;
  if (has_riotgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->riotgameid(), output);
  }
  
  // optional string riotRoomPassword = 8;
  if (has_riotroompassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->riotroompassword().data(), this->riotroompassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->riotroompassword(), output);
  }
  
  // optional string queueTypeName = 9;
  if (has_queuetypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queuetypename().data(), this->queuetypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->queuetypename(), output);
  }
  
  // repeated .guru.MatchupInfo.ParticipantStats participants = 10;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->participants(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .guru.Region region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }
  
  // required string gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamemode().data(), this->gamemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamemode(), target);
  }
  
  // required string gameType = 3;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gametype(), target);
  }
  
  // required uint32 mapId = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }
  
  // required uint32 maxNumPlayers = 5;
  if (has_maxnumplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxnumplayers(), target);
  }
  
  // required uint32 hostPlayer = 6;
  if (has_hostplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hostplayer(), target);
  }
  
  // optional uint64 riotGameId = 7;
  if (has_riotgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->riotgameid(), target);
  }
  
  // optional string riotRoomPassword = 8;
  if (has_riotroompassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->riotroompassword().data(), this->riotroompassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->riotroompassword(), target);
  }
  
  // optional string queueTypeName = 9;
  if (has_queuetypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queuetypename().data(), this->queuetypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->queuetypename(), target);
  }
  
  // repeated .guru.MatchupInfo.ParticipantStats participants = 10;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->participants(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .guru.Region region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }
    
    // required string gameMode = 2;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamemode());
    }
    
    // required string gameType = 3;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }
    
    // required uint32 mapId = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }
    
    // required uint32 maxNumPlayers = 5;
    if (has_maxnumplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnumplayers());
    }
    
    // required uint32 hostPlayer = 6;
    if (has_hostplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hostplayer());
    }
    
    // optional uint64 riotGameId = 7;
    if (has_riotgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->riotgameid());
    }
    
    // optional string riotRoomPassword = 8;
    if (has_riotroompassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->riotroompassword());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string queueTypeName = 9;
    if (has_queuetypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queuetypename());
    }
    
  }
  // repeated .guru.MatchupInfo.ParticipantStats participants = 10;
  total_size += 1 * this->participants_size();
  for (int i = 0; i < this->participants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participants(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupInfo::MergeFrom(const MatchupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_maxnumplayers()) {
      set_maxnumplayers(from.maxnumplayers());
    }
    if (from.has_hostplayer()) {
      set_hostplayer(from.hostplayer());
    }
    if (from.has_riotgameid()) {
      set_riotgameid(from.riotgameid());
    }
    if (from.has_riotroompassword()) {
      set_riotroompassword(from.riotroompassword());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_queuetypename()) {
      set_queuetypename(from.queuetypename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupInfo::CopyFrom(const MatchupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < participants_size(); i++) {
    if (!this->participants(i).IsInitialized()) return false;
  }
  return true;
}

void MatchupInfo::Swap(MatchupInfo* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(gametype_, other->gametype_);
    std::swap(mapid_, other->mapid_);
    std::swap(maxnumplayers_, other->maxnumplayers_);
    std::swap(hostplayer_, other->hostplayer_);
    std::swap(riotgameid_, other->riotgameid_);
    std::swap(riotroompassword_, other->riotroompassword_);
    std::swap(queuetypename_, other->queuetypename_);
    participants_.Swap(&other->participants_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupInfo_descriptor_;
  metadata.reflection = MatchupInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

// @@protoc_insertion_point(global_scope)
