// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "participantssuggestions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guru {

namespace {

const ::google::protobuf::Descriptor* ParticipantSuggestions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantSuggestions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantSuggestions_Suggestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantSuggestions_Suggestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantSuggestions_ChampionMatchup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantSuggestions_ChampionMatchup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantsSuggestions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantsSuggestions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_participantssuggestions_2eproto() {
  protobuf_AddDesc_participantssuggestions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "participantssuggestions.proto");
  GOOGLE_CHECK(file != NULL);
  ParticipantSuggestions_descriptor_ = file->message_type(0);
  static const int ParticipantSuggestions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions, participant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions, champions_),
  };
  ParticipantSuggestions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantSuggestions_descriptor_,
      ParticipantSuggestions::default_instance_,
      ParticipantSuggestions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantSuggestions));
  ParticipantSuggestions_Suggestion_descriptor_ = ParticipantSuggestions_descriptor_->nested_type(0);
  static const int ParticipantSuggestions_Suggestion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, championid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, strongagainst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, badagainst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, goodwith_),
  };
  ParticipantSuggestions_Suggestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantSuggestions_Suggestion_descriptor_,
      ParticipantSuggestions_Suggestion::default_instance_,
      ParticipantSuggestions_Suggestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_Suggestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantSuggestions_Suggestion));
  ParticipantSuggestions_ChampionMatchup_descriptor_ = ParticipantSuggestions_descriptor_->nested_type(1);
  static const int ParticipantSuggestions_ChampionMatchup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_ChampionMatchup, championid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_ChampionMatchup, winrate_),
  };
  ParticipantSuggestions_ChampionMatchup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantSuggestions_ChampionMatchup_descriptor_,
      ParticipantSuggestions_ChampionMatchup::default_instance_,
      ParticipantSuggestions_ChampionMatchup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_ChampionMatchup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantSuggestions_ChampionMatchup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantSuggestions_ChampionMatchup));
  ParticipantsSuggestions_descriptor_ = file->message_type(1);
  static const int ParticipantsSuggestions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsSuggestions, suggestions_),
  };
  ParticipantsSuggestions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantsSuggestions_descriptor_,
      ParticipantsSuggestions::default_instance_,
      ParticipantsSuggestions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsSuggestions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantsSuggestions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantsSuggestions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_participantssuggestions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantSuggestions_descriptor_, &ParticipantSuggestions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantSuggestions_Suggestion_descriptor_, &ParticipantSuggestions_Suggestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantSuggestions_ChampionMatchup_descriptor_, &ParticipantSuggestions_ChampionMatchup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantsSuggestions_descriptor_, &ParticipantsSuggestions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_participantssuggestions_2eproto() {
  delete ParticipantSuggestions::default_instance_;
  delete ParticipantSuggestions_reflection_;
  delete ParticipantSuggestions_Suggestion::default_instance_;
  delete ParticipantSuggestions_Suggestion_reflection_;
  delete ParticipantSuggestions_ChampionMatchup::default_instance_;
  delete ParticipantSuggestions_ChampionMatchup_reflection_;
  delete ParticipantsSuggestions::default_instance_;
  delete ParticipantsSuggestions_reflection_;
}

void protobuf_AddDesc_participantssuggestions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::guru::protobuf_AddDesc_participantrole_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035participantssuggestions.proto\022\004guru\032\025p"
    "articipantrole.proto\"\255\003\n\026ParticipantSugg"
    "estions\022\023\n\013participant\030\001 \002(\r\022:\n\tchampion"
    "s\030\002 \003(\0132\'.guru.ParticipantSuggestions.Su"
    "ggestion\032\211\002\n\nSuggestion\022\022\n\nchampionId\030\001 "
    "\002(\r\022 \n\004role\030\002 \002(\0162\022.guru.ChampionRole\022C\n"
    "\rstrongAgainst\030\003 \003(\0132,.guru.ParticipantS"
    "uggestions.ChampionMatchup\022@\n\nbadAgainst"
    "\030\004 \003(\0132,.guru.ParticipantSuggestions.Cha"
    "mpionMatchup\022>\n\010goodWith\030\005 \003(\0132,.guru.Pa"
    "rticipantSuggestions.ChampionMatchup\0326\n\017"
    "ChampionMatchup\022\022\n\nchampionId\030\001 \002(\r\022\017\n\007w"
    "inrate\030\002 \002(\001\"L\n\027ParticipantsSuggestions\022"
    "1\n\013suggestions\030\001 \003(\0132\034.guru.ParticipantS"
    "uggestions", 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "participantssuggestions.proto", &protobuf_RegisterTypes);
  ParticipantSuggestions::default_instance_ = new ParticipantSuggestions();
  ParticipantSuggestions_Suggestion::default_instance_ = new ParticipantSuggestions_Suggestion();
  ParticipantSuggestions_ChampionMatchup::default_instance_ = new ParticipantSuggestions_ChampionMatchup();
  ParticipantsSuggestions::default_instance_ = new ParticipantsSuggestions();
  ParticipantSuggestions::default_instance_->InitAsDefaultInstance();
  ParticipantSuggestions_Suggestion::default_instance_->InitAsDefaultInstance();
  ParticipantSuggestions_ChampionMatchup::default_instance_->InitAsDefaultInstance();
  ParticipantsSuggestions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_participantssuggestions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_participantssuggestions_2eproto {
  StaticDescriptorInitializer_participantssuggestions_2eproto() {
    protobuf_AddDesc_participantssuggestions_2eproto();
  }
} static_descriptor_initializer_participantssuggestions_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ParticipantSuggestions_Suggestion::kChampionIdFieldNumber;
const int ParticipantSuggestions_Suggestion::kRoleFieldNumber;
const int ParticipantSuggestions_Suggestion::kStrongAgainstFieldNumber;
const int ParticipantSuggestions_Suggestion::kBadAgainstFieldNumber;
const int ParticipantSuggestions_Suggestion::kGoodWithFieldNumber;
#endif  // !_MSC_VER

ParticipantSuggestions_Suggestion::ParticipantSuggestions_Suggestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantSuggestions_Suggestion::InitAsDefaultInstance() {
}

ParticipantSuggestions_Suggestion::ParticipantSuggestions_Suggestion(const ParticipantSuggestions_Suggestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantSuggestions_Suggestion::SharedCtor() {
  _cached_size_ = 0;
  championid_ = 0u;
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantSuggestions_Suggestion::~ParticipantSuggestions_Suggestion() {
  SharedDtor();
}

void ParticipantSuggestions_Suggestion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParticipantSuggestions_Suggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantSuggestions_Suggestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantSuggestions_Suggestion_descriptor_;
}

const ParticipantSuggestions_Suggestion& ParticipantSuggestions_Suggestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_participantssuggestions_2eproto();  return *default_instance_;
}

ParticipantSuggestions_Suggestion* ParticipantSuggestions_Suggestion::default_instance_ = NULL;

ParticipantSuggestions_Suggestion* ParticipantSuggestions_Suggestion::New() const {
  return new ParticipantSuggestions_Suggestion;
}

void ParticipantSuggestions_Suggestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    championid_ = 0u;
    role_ = 0;
  }
  strongagainst_.Clear();
  badagainst_.Clear();
  goodwith_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantSuggestions_Suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 championId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &championid_)));
          set_has_championid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }
      
      // required .guru.ChampionRole role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guru::ChampionRole_IsValid(value)) {
            set_role(static_cast< guru::ChampionRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strongAgainst;
        break;
      }
      
      // repeated .guru.ParticipantSuggestions.ChampionMatchup strongAgainst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strongAgainst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strongagainst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strongAgainst;
        if (input->ExpectTag(34)) goto parse_badAgainst;
        break;
      }
      
      // repeated .guru.ParticipantSuggestions.ChampionMatchup badAgainst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_badAgainst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_badagainst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_badAgainst;
        if (input->ExpectTag(42)) goto parse_goodWith;
        break;
      }
      
      // repeated .guru.ParticipantSuggestions.ChampionMatchup goodWith = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodWith:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodwith()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_goodWith;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantSuggestions_Suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->championid(), output);
  }
  
  // required .guru.ChampionRole role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->role(), output);
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup strongAgainst = 3;
  for (int i = 0; i < this->strongagainst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->strongagainst(i), output);
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup badAgainst = 4;
  for (int i = 0; i < this->badagainst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->badagainst(i), output);
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup goodWith = 5;
  for (int i = 0; i < this->goodwith_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->goodwith(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantSuggestions_Suggestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->championid(), target);
  }
  
  // required .guru.ChampionRole role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->role(), target);
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup strongAgainst = 3;
  for (int i = 0; i < this->strongagainst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->strongagainst(i), target);
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup badAgainst = 4;
  for (int i = 0; i < this->badagainst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->badagainst(i), target);
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup goodWith = 5;
  for (int i = 0; i < this->goodwith_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->goodwith(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantSuggestions_Suggestion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 championId = 1;
    if (has_championid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->championid());
    }
    
    // required .guru.ChampionRole role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }
    
  }
  // repeated .guru.ParticipantSuggestions.ChampionMatchup strongAgainst = 3;
  total_size += 1 * this->strongagainst_size();
  for (int i = 0; i < this->strongagainst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strongagainst(i));
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup badAgainst = 4;
  total_size += 1 * this->badagainst_size();
  for (int i = 0; i < this->badagainst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->badagainst(i));
  }
  
  // repeated .guru.ParticipantSuggestions.ChampionMatchup goodWith = 5;
  total_size += 1 * this->goodwith_size();
  for (int i = 0; i < this->goodwith_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodwith(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantSuggestions_Suggestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantSuggestions_Suggestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantSuggestions_Suggestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantSuggestions_Suggestion::MergeFrom(const ParticipantSuggestions_Suggestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  strongagainst_.MergeFrom(from.strongagainst_);
  badagainst_.MergeFrom(from.badagainst_);
  goodwith_.MergeFrom(from.goodwith_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_championid()) {
      set_championid(from.championid());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantSuggestions_Suggestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantSuggestions_Suggestion::CopyFrom(const ParticipantSuggestions_Suggestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantSuggestions_Suggestion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < strongagainst_size(); i++) {
    if (!this->strongagainst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < badagainst_size(); i++) {
    if (!this->badagainst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < goodwith_size(); i++) {
    if (!this->goodwith(i).IsInitialized()) return false;
  }
  return true;
}

void ParticipantSuggestions_Suggestion::Swap(ParticipantSuggestions_Suggestion* other) {
  if (other != this) {
    std::swap(championid_, other->championid_);
    std::swap(role_, other->role_);
    strongagainst_.Swap(&other->strongagainst_);
    badagainst_.Swap(&other->badagainst_);
    goodwith_.Swap(&other->goodwith_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantSuggestions_Suggestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantSuggestions_Suggestion_descriptor_;
  metadata.reflection = ParticipantSuggestions_Suggestion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParticipantSuggestions_ChampionMatchup::kChampionIdFieldNumber;
const int ParticipantSuggestions_ChampionMatchup::kWinrateFieldNumber;
#endif  // !_MSC_VER

ParticipantSuggestions_ChampionMatchup::ParticipantSuggestions_ChampionMatchup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantSuggestions_ChampionMatchup::InitAsDefaultInstance() {
}

ParticipantSuggestions_ChampionMatchup::ParticipantSuggestions_ChampionMatchup(const ParticipantSuggestions_ChampionMatchup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantSuggestions_ChampionMatchup::SharedCtor() {
  _cached_size_ = 0;
  championid_ = 0u;
  winrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantSuggestions_ChampionMatchup::~ParticipantSuggestions_ChampionMatchup() {
  SharedDtor();
}

void ParticipantSuggestions_ChampionMatchup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParticipantSuggestions_ChampionMatchup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantSuggestions_ChampionMatchup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantSuggestions_ChampionMatchup_descriptor_;
}

const ParticipantSuggestions_ChampionMatchup& ParticipantSuggestions_ChampionMatchup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_participantssuggestions_2eproto();  return *default_instance_;
}

ParticipantSuggestions_ChampionMatchup* ParticipantSuggestions_ChampionMatchup::default_instance_ = NULL;

ParticipantSuggestions_ChampionMatchup* ParticipantSuggestions_ChampionMatchup::New() const {
  return new ParticipantSuggestions_ChampionMatchup;
}

void ParticipantSuggestions_ChampionMatchup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    championid_ = 0u;
    winrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantSuggestions_ChampionMatchup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 championId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &championid_)));
          set_has_championid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_winrate;
        break;
      }
      
      // required double winrate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_winrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantSuggestions_ChampionMatchup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->championid(), output);
  }
  
  // required double winrate = 2;
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->winrate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantSuggestions_ChampionMatchup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 championId = 1;
  if (has_championid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->championid(), target);
  }
  
  // required double winrate = 2;
  if (has_winrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->winrate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantSuggestions_ChampionMatchup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 championId = 1;
    if (has_championid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->championid());
    }
    
    // required double winrate = 2;
    if (has_winrate()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantSuggestions_ChampionMatchup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantSuggestions_ChampionMatchup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantSuggestions_ChampionMatchup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantSuggestions_ChampionMatchup::MergeFrom(const ParticipantSuggestions_ChampionMatchup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_championid()) {
      set_championid(from.championid());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantSuggestions_ChampionMatchup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantSuggestions_ChampionMatchup::CopyFrom(const ParticipantSuggestions_ChampionMatchup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantSuggestions_ChampionMatchup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ParticipantSuggestions_ChampionMatchup::Swap(ParticipantSuggestions_ChampionMatchup* other) {
  if (other != this) {
    std::swap(championid_, other->championid_);
    std::swap(winrate_, other->winrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantSuggestions_ChampionMatchup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantSuggestions_ChampionMatchup_descriptor_;
  metadata.reflection = ParticipantSuggestions_ChampionMatchup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParticipantSuggestions::kParticipantFieldNumber;
const int ParticipantSuggestions::kChampionsFieldNumber;
#endif  // !_MSC_VER

ParticipantSuggestions::ParticipantSuggestions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantSuggestions::InitAsDefaultInstance() {
}

ParticipantSuggestions::ParticipantSuggestions(const ParticipantSuggestions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantSuggestions::SharedCtor() {
  _cached_size_ = 0;
  participant_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantSuggestions::~ParticipantSuggestions() {
  SharedDtor();
}

void ParticipantSuggestions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParticipantSuggestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantSuggestions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantSuggestions_descriptor_;
}

const ParticipantSuggestions& ParticipantSuggestions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_participantssuggestions_2eproto();  return *default_instance_;
}

ParticipantSuggestions* ParticipantSuggestions::default_instance_ = NULL;

ParticipantSuggestions* ParticipantSuggestions::New() const {
  return new ParticipantSuggestions;
}

void ParticipantSuggestions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    participant_ = 0u;
  }
  champions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantSuggestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 participant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &participant_)));
          set_has_participant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_champions;
        break;
      }
      
      // repeated .guru.ParticipantSuggestions.Suggestion champions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_champions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_champions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_champions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantSuggestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 participant = 1;
  if (has_participant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->participant(), output);
  }
  
  // repeated .guru.ParticipantSuggestions.Suggestion champions = 2;
  for (int i = 0; i < this->champions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->champions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantSuggestions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 participant = 1;
  if (has_participant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->participant(), target);
  }
  
  // repeated .guru.ParticipantSuggestions.Suggestion champions = 2;
  for (int i = 0; i < this->champions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->champions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantSuggestions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 participant = 1;
    if (has_participant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->participant());
    }
    
  }
  // repeated .guru.ParticipantSuggestions.Suggestion champions = 2;
  total_size += 1 * this->champions_size();
  for (int i = 0; i < this->champions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->champions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantSuggestions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantSuggestions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantSuggestions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantSuggestions::MergeFrom(const ParticipantSuggestions& from) {
  GOOGLE_CHECK_NE(&from, this);
  champions_.MergeFrom(from.champions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participant()) {
      set_participant(from.participant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantSuggestions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantSuggestions::CopyFrom(const ParticipantSuggestions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantSuggestions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < champions_size(); i++) {
    if (!this->champions(i).IsInitialized()) return false;
  }
  return true;
}

void ParticipantSuggestions::Swap(ParticipantSuggestions* other) {
  if (other != this) {
    std::swap(participant_, other->participant_);
    champions_.Swap(&other->champions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantSuggestions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantSuggestions_descriptor_;
  metadata.reflection = ParticipantSuggestions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantsSuggestions::kSuggestionsFieldNumber;
#endif  // !_MSC_VER

ParticipantsSuggestions::ParticipantsSuggestions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipantsSuggestions::InitAsDefaultInstance() {
}

ParticipantsSuggestions::ParticipantsSuggestions(const ParticipantsSuggestions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipantsSuggestions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantsSuggestions::~ParticipantsSuggestions() {
  SharedDtor();
}

void ParticipantsSuggestions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParticipantsSuggestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantsSuggestions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantsSuggestions_descriptor_;
}

const ParticipantsSuggestions& ParticipantsSuggestions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_participantssuggestions_2eproto();  return *default_instance_;
}

ParticipantsSuggestions* ParticipantsSuggestions::default_instance_ = NULL;

ParticipantsSuggestions* ParticipantsSuggestions::New() const {
  return new ParticipantsSuggestions;
}

void ParticipantsSuggestions::Clear() {
  suggestions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantsSuggestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .guru.ParticipantSuggestions suggestions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suggestions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_suggestions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipantsSuggestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .guru.ParticipantSuggestions suggestions = 1;
  for (int i = 0; i < this->suggestions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->suggestions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipantsSuggestions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .guru.ParticipantSuggestions suggestions = 1;
  for (int i = 0; i < this->suggestions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->suggestions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipantsSuggestions::ByteSize() const {
  int total_size = 0;
  
  // repeated .guru.ParticipantSuggestions suggestions = 1;
  total_size += 1 * this->suggestions_size();
  for (int i = 0; i < this->suggestions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suggestions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantsSuggestions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantsSuggestions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantsSuggestions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantsSuggestions::MergeFrom(const ParticipantsSuggestions& from) {
  GOOGLE_CHECK_NE(&from, this);
  suggestions_.MergeFrom(from.suggestions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantsSuggestions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantsSuggestions::CopyFrom(const ParticipantsSuggestions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantsSuggestions::IsInitialized() const {
  
  for (int i = 0; i < suggestions_size(); i++) {
    if (!this->suggestions(i).IsInitialized()) return false;
  }
  return true;
}

void ParticipantsSuggestions::Swap(ParticipantsSuggestions* other) {
  if (other != this) {
    suggestions_.Swap(&other->suggestions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantsSuggestions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantsSuggestions_descriptor_;
  metadata.reflection = ParticipantsSuggestions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

// @@protoc_insertion_point(global_scope)
