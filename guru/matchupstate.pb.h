// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchupstate.proto

#ifndef PROTOBUF_matchupstate_2eproto__INCLUDED
#define PROTOBUF_matchupstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "matchupinfo.pb.h"
#include "enemyroster.pb.h"
#include "championban.pb.h"
#include "bansuggestions.pb.h"
#include "participantssuggestions.pb.h"
#include "participantrole.pb.h"
// @@protoc_insertion_point(includes)

namespace guru {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_matchupstate_2eproto();
void protobuf_AssignDesc_matchupstate_2eproto();
void protobuf_ShutdownFile_matchupstate_2eproto();

class MatchupState;
class MatchupState_ParticipantState;

// ===================================================================

class MatchupState_ParticipantState : public ::google::protobuf::Message {
 public:
  MatchupState_ParticipantState();
  virtual ~MatchupState_ParticipantState();
  
  MatchupState_ParticipantState(const MatchupState_ParticipantState& from);
  
  inline MatchupState_ParticipantState& operator=(const MatchupState_ParticipantState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchupState_ParticipantState& default_instance();
  
  void Swap(MatchupState_ParticipantState* other);
  
  // implements Message ----------------------------------------------
  
  MatchupState_ParticipantState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchupState_ParticipantState& from);
  void MergeFrom(const MatchupState_ParticipantState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 participant = 1;
  inline bool has_participant() const;
  inline void clear_participant();
  static const int kParticipantFieldNumber = 1;
  inline ::google::protobuf::uint32 participant() const;
  inline void set_participant(::google::protobuf::uint32 value);
  
  // optional fixed64 pickingStart = 2;
  inline bool has_pickingstart() const;
  inline void clear_pickingstart();
  static const int kPickingStartFieldNumber = 2;
  inline ::google::protobuf::uint64 pickingstart() const;
  inline void set_pickingstart(::google::protobuf::uint64 value);
  
  // optional uint32 pickingTimer = 3;
  inline bool has_pickingtimer() const;
  inline void clear_pickingtimer();
  static const int kPickingTimerFieldNumber = 3;
  inline ::google::protobuf::uint32 pickingtimer() const;
  inline void set_pickingtimer(::google::protobuf::uint32 value);
  
  // optional uint32 spell1 = 4;
  inline bool has_spell1() const;
  inline void clear_spell1();
  static const int kSpell1FieldNumber = 4;
  inline ::google::protobuf::uint32 spell1() const;
  inline void set_spell1(::google::protobuf::uint32 value);
  
  // optional uint32 spell2 = 5;
  inline bool has_spell2() const;
  inline void clear_spell2();
  static const int kSpell2FieldNumber = 5;
  inline ::google::protobuf::uint32 spell2() const;
  inline void set_spell2(::google::protobuf::uint32 value);
  
  // optional uint32 championId = 6;
  inline bool has_championid() const;
  inline void clear_championid();
  static const int kChampionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 championid() const;
  inline void set_championid(::google::protobuf::uint32 value);
  
  // optional .guru.ChampionRole role = 7;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 7;
  inline guru::ChampionRole role() const;
  inline void set_role(guru::ChampionRole value);
  
  // optional bool locked = 8;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 8;
  inline bool locked() const;
  inline void set_locked(bool value);
  
  // @@protoc_insertion_point(class_scope:guru.MatchupState.ParticipantState)
 private:
  inline void set_has_participant();
  inline void clear_has_participant();
  inline void set_has_pickingstart();
  inline void clear_has_pickingstart();
  inline void set_has_pickingtimer();
  inline void clear_has_pickingtimer();
  inline void set_has_spell1();
  inline void clear_has_spell1();
  inline void set_has_spell2();
  inline void clear_has_spell2();
  inline void set_has_championid();
  inline void clear_has_championid();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_locked();
  inline void clear_has_locked();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 pickingstart_;
  ::google::protobuf::uint32 participant_;
  ::google::protobuf::uint32 pickingtimer_;
  ::google::protobuf::uint32 spell1_;
  ::google::protobuf::uint32 spell2_;
  ::google::protobuf::uint32 championid_;
  int role_;
  bool locked_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_matchupstate_2eproto();
  friend void protobuf_AssignDesc_matchupstate_2eproto();
  friend void protobuf_ShutdownFile_matchupstate_2eproto();
  
  void InitAsDefaultInstance();
  static MatchupState_ParticipantState* default_instance_;
};
// -------------------------------------------------------------------

class MatchupState : public ::google::protobuf::Message {
 public:
  MatchupState();
  virtual ~MatchupState();
  
  MatchupState(const MatchupState& from);
  
  inline MatchupState& operator=(const MatchupState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchupState& default_instance();
  
  void Swap(MatchupState* other);
  
  // implements Message ----------------------------------------------
  
  MatchupState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchupState& from);
  void MergeFrom(const MatchupState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MatchupState_ParticipantState ParticipantState;
  
  // accessors -------------------------------------------------------
  
  // required .guru.MatchupInfo matchupInfo = 1;
  inline bool has_matchupinfo() const;
  inline void clear_matchupinfo();
  static const int kMatchupInfoFieldNumber = 1;
  inline const ::guru::MatchupInfo& matchupinfo() const;
  inline ::guru::MatchupInfo* mutable_matchupinfo();
  inline ::guru::MatchupInfo* release_matchupinfo();
  
  // optional .guru.EnemyRoster enemyRoster = 2;
  inline bool has_enemyroster() const;
  inline void clear_enemyroster();
  static const int kEnemyRosterFieldNumber = 2;
  inline const ::guru::EnemyRoster& enemyroster() const;
  inline ::guru::EnemyRoster* mutable_enemyroster();
  inline ::guru::EnemyRoster* release_enemyroster();
  
  // repeated .guru.ChampionBan championBans = 3;
  inline int championbans_size() const;
  inline void clear_championbans();
  static const int kChampionBansFieldNumber = 3;
  inline const ::guru::ChampionBan& championbans(int index) const;
  inline ::guru::ChampionBan* mutable_championbans(int index);
  inline ::guru::ChampionBan* add_championbans();
  inline const ::google::protobuf::RepeatedPtrField< ::guru::ChampionBan >&
      championbans() const;
  inline ::google::protobuf::RepeatedPtrField< ::guru::ChampionBan >*
      mutable_championbans();
  
  // repeated .guru.MatchupState.ParticipantState participantState = 4;
  inline int participantstate_size() const;
  inline void clear_participantstate();
  static const int kParticipantStateFieldNumber = 4;
  inline const ::guru::MatchupState_ParticipantState& participantstate(int index) const;
  inline ::guru::MatchupState_ParticipantState* mutable_participantstate(int index);
  inline ::guru::MatchupState_ParticipantState* add_participantstate();
  inline const ::google::protobuf::RepeatedPtrField< ::guru::MatchupState_ParticipantState >&
      participantstate() const;
  inline ::google::protobuf::RepeatedPtrField< ::guru::MatchupState_ParticipantState >*
      mutable_participantstate();
  
  // optional .guru.BanSuggestions banSuggestions = 5;
  inline bool has_bansuggestions() const;
  inline void clear_bansuggestions();
  static const int kBanSuggestionsFieldNumber = 5;
  inline const ::guru::BanSuggestions& bansuggestions() const;
  inline ::guru::BanSuggestions* mutable_bansuggestions();
  inline ::guru::BanSuggestions* release_bansuggestions();
  
  // optional .guru.ParticipantsSuggestions participantsSugestions = 6;
  inline bool has_participantssugestions() const;
  inline void clear_participantssugestions();
  static const int kParticipantsSugestionsFieldNumber = 6;
  inline const ::guru::ParticipantsSuggestions& participantssugestions() const;
  inline ::guru::ParticipantsSuggestions* mutable_participantssugestions();
  inline ::guru::ParticipantsSuggestions* release_participantssugestions();
  
  // @@protoc_insertion_point(class_scope:guru.MatchupState)
 private:
  inline void set_has_matchupinfo();
  inline void clear_has_matchupinfo();
  inline void set_has_enemyroster();
  inline void clear_has_enemyroster();
  inline void set_has_bansuggestions();
  inline void clear_has_bansuggestions();
  inline void set_has_participantssugestions();
  inline void clear_has_participantssugestions();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::guru::MatchupInfo* matchupinfo_;
  ::guru::EnemyRoster* enemyroster_;
  ::google::protobuf::RepeatedPtrField< ::guru::ChampionBan > championbans_;
  ::google::protobuf::RepeatedPtrField< ::guru::MatchupState_ParticipantState > participantstate_;
  ::guru::BanSuggestions* bansuggestions_;
  ::guru::ParticipantsSuggestions* participantssugestions_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_matchupstate_2eproto();
  friend void protobuf_AssignDesc_matchupstate_2eproto();
  friend void protobuf_ShutdownFile_matchupstate_2eproto();
  
  void InitAsDefaultInstance();
  static MatchupState* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchupState_ParticipantState

// required uint32 participant = 1;
inline bool MatchupState_ParticipantState::has_participant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchupState_ParticipantState::set_has_participant() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchupState_ParticipantState::clear_has_participant() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchupState_ParticipantState::clear_participant() {
  participant_ = 0u;
  clear_has_participant();
}
inline ::google::protobuf::uint32 MatchupState_ParticipantState::participant() const {
  return participant_;
}
inline void MatchupState_ParticipantState::set_participant(::google::protobuf::uint32 value) {
  set_has_participant();
  participant_ = value;
}

// optional fixed64 pickingStart = 2;
inline bool MatchupState_ParticipantState::has_pickingstart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchupState_ParticipantState::set_has_pickingstart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchupState_ParticipantState::clear_has_pickingstart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchupState_ParticipantState::clear_pickingstart() {
  pickingstart_ = GOOGLE_ULONGLONG(0);
  clear_has_pickingstart();
}
inline ::google::protobuf::uint64 MatchupState_ParticipantState::pickingstart() const {
  return pickingstart_;
}
inline void MatchupState_ParticipantState::set_pickingstart(::google::protobuf::uint64 value) {
  set_has_pickingstart();
  pickingstart_ = value;
}

// optional uint32 pickingTimer = 3;
inline bool MatchupState_ParticipantState::has_pickingtimer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchupState_ParticipantState::set_has_pickingtimer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchupState_ParticipantState::clear_has_pickingtimer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchupState_ParticipantState::clear_pickingtimer() {
  pickingtimer_ = 0u;
  clear_has_pickingtimer();
}
inline ::google::protobuf::uint32 MatchupState_ParticipantState::pickingtimer() const {
  return pickingtimer_;
}
inline void MatchupState_ParticipantState::set_pickingtimer(::google::protobuf::uint32 value) {
  set_has_pickingtimer();
  pickingtimer_ = value;
}

// optional uint32 spell1 = 4;
inline bool MatchupState_ParticipantState::has_spell1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchupState_ParticipantState::set_has_spell1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchupState_ParticipantState::clear_has_spell1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchupState_ParticipantState::clear_spell1() {
  spell1_ = 0u;
  clear_has_spell1();
}
inline ::google::protobuf::uint32 MatchupState_ParticipantState::spell1() const {
  return spell1_;
}
inline void MatchupState_ParticipantState::set_spell1(::google::protobuf::uint32 value) {
  set_has_spell1();
  spell1_ = value;
}

// optional uint32 spell2 = 5;
inline bool MatchupState_ParticipantState::has_spell2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchupState_ParticipantState::set_has_spell2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchupState_ParticipantState::clear_has_spell2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchupState_ParticipantState::clear_spell2() {
  spell2_ = 0u;
  clear_has_spell2();
}
inline ::google::protobuf::uint32 MatchupState_ParticipantState::spell2() const {
  return spell2_;
}
inline void MatchupState_ParticipantState::set_spell2(::google::protobuf::uint32 value) {
  set_has_spell2();
  spell2_ = value;
}

// optional uint32 championId = 6;
inline bool MatchupState_ParticipantState::has_championid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchupState_ParticipantState::set_has_championid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchupState_ParticipantState::clear_has_championid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchupState_ParticipantState::clear_championid() {
  championid_ = 0u;
  clear_has_championid();
}
inline ::google::protobuf::uint32 MatchupState_ParticipantState::championid() const {
  return championid_;
}
inline void MatchupState_ParticipantState::set_championid(::google::protobuf::uint32 value) {
  set_has_championid();
  championid_ = value;
}

// optional .guru.ChampionRole role = 7;
inline bool MatchupState_ParticipantState::has_role() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchupState_ParticipantState::set_has_role() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchupState_ParticipantState::clear_has_role() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchupState_ParticipantState::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline guru::ChampionRole MatchupState_ParticipantState::role() const {
  return static_cast< guru::ChampionRole >(role_);
}
inline void MatchupState_ParticipantState::set_role(guru::ChampionRole value) {
  GOOGLE_DCHECK(guru::ChampionRole_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional bool locked = 8;
inline bool MatchupState_ParticipantState::has_locked() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchupState_ParticipantState::set_has_locked() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchupState_ParticipantState::clear_has_locked() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchupState_ParticipantState::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool MatchupState_ParticipantState::locked() const {
  return locked_;
}
inline void MatchupState_ParticipantState::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
}

// -------------------------------------------------------------------

// MatchupState

// required .guru.MatchupInfo matchupInfo = 1;
inline bool MatchupState::has_matchupinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchupState::set_has_matchupinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchupState::clear_has_matchupinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchupState::clear_matchupinfo() {
  if (matchupinfo_ != NULL) matchupinfo_->::guru::MatchupInfo::Clear();
  clear_has_matchupinfo();
}
inline const ::guru::MatchupInfo& MatchupState::matchupinfo() const {
  return matchupinfo_ != NULL ? *matchupinfo_ : *default_instance_->matchupinfo_;
}
inline ::guru::MatchupInfo* MatchupState::mutable_matchupinfo() {
  set_has_matchupinfo();
  if (matchupinfo_ == NULL) matchupinfo_ = new ::guru::MatchupInfo;
  return matchupinfo_;
}
inline ::guru::MatchupInfo* MatchupState::release_matchupinfo() {
  clear_has_matchupinfo();
  ::guru::MatchupInfo* temp = matchupinfo_;
  matchupinfo_ = NULL;
  return temp;
}

// optional .guru.EnemyRoster enemyRoster = 2;
inline bool MatchupState::has_enemyroster() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchupState::set_has_enemyroster() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchupState::clear_has_enemyroster() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchupState::clear_enemyroster() {
  if (enemyroster_ != NULL) enemyroster_->::guru::EnemyRoster::Clear();
  clear_has_enemyroster();
}
inline const ::guru::EnemyRoster& MatchupState::enemyroster() const {
  return enemyroster_ != NULL ? *enemyroster_ : *default_instance_->enemyroster_;
}
inline ::guru::EnemyRoster* MatchupState::mutable_enemyroster() {
  set_has_enemyroster();
  if (enemyroster_ == NULL) enemyroster_ = new ::guru::EnemyRoster;
  return enemyroster_;
}
inline ::guru::EnemyRoster* MatchupState::release_enemyroster() {
  clear_has_enemyroster();
  ::guru::EnemyRoster* temp = enemyroster_;
  enemyroster_ = NULL;
  return temp;
}

// repeated .guru.ChampionBan championBans = 3;
inline int MatchupState::championbans_size() const {
  return championbans_.size();
}
inline void MatchupState::clear_championbans() {
  championbans_.Clear();
}
inline const ::guru::ChampionBan& MatchupState::championbans(int index) const {
  return championbans_.Get(index);
}
inline ::guru::ChampionBan* MatchupState::mutable_championbans(int index) {
  return championbans_.Mutable(index);
}
inline ::guru::ChampionBan* MatchupState::add_championbans() {
  return championbans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::guru::ChampionBan >&
MatchupState::championbans() const {
  return championbans_;
}
inline ::google::protobuf::RepeatedPtrField< ::guru::ChampionBan >*
MatchupState::mutable_championbans() {
  return &championbans_;
}

// repeated .guru.MatchupState.ParticipantState participantState = 4;
inline int MatchupState::participantstate_size() const {
  return participantstate_.size();
}
inline void MatchupState::clear_participantstate() {
  participantstate_.Clear();
}
inline const ::guru::MatchupState_ParticipantState& MatchupState::participantstate(int index) const {
  return participantstate_.Get(index);
}
inline ::guru::MatchupState_ParticipantState* MatchupState::mutable_participantstate(int index) {
  return participantstate_.Mutable(index);
}
inline ::guru::MatchupState_ParticipantState* MatchupState::add_participantstate() {
  return participantstate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::guru::MatchupState_ParticipantState >&
MatchupState::participantstate() const {
  return participantstate_;
}
inline ::google::protobuf::RepeatedPtrField< ::guru::MatchupState_ParticipantState >*
MatchupState::mutable_participantstate() {
  return &participantstate_;
}

// optional .guru.BanSuggestions banSuggestions = 5;
inline bool MatchupState::has_bansuggestions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchupState::set_has_bansuggestions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchupState::clear_has_bansuggestions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchupState::clear_bansuggestions() {
  if (bansuggestions_ != NULL) bansuggestions_->::guru::BanSuggestions::Clear();
  clear_has_bansuggestions();
}
inline const ::guru::BanSuggestions& MatchupState::bansuggestions() const {
  return bansuggestions_ != NULL ? *bansuggestions_ : *default_instance_->bansuggestions_;
}
inline ::guru::BanSuggestions* MatchupState::mutable_bansuggestions() {
  set_has_bansuggestions();
  if (bansuggestions_ == NULL) bansuggestions_ = new ::guru::BanSuggestions;
  return bansuggestions_;
}
inline ::guru::BanSuggestions* MatchupState::release_bansuggestions() {
  clear_has_bansuggestions();
  ::guru::BanSuggestions* temp = bansuggestions_;
  bansuggestions_ = NULL;
  return temp;
}

// optional .guru.ParticipantsSuggestions participantsSugestions = 6;
inline bool MatchupState::has_participantssugestions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchupState::set_has_participantssugestions() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchupState::clear_has_participantssugestions() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchupState::clear_participantssugestions() {
  if (participantssugestions_ != NULL) participantssugestions_->::guru::ParticipantsSuggestions::Clear();
  clear_has_participantssugestions();
}
inline const ::guru::ParticipantsSuggestions& MatchupState::participantssugestions() const {
  return participantssugestions_ != NULL ? *participantssugestions_ : *default_instance_->participantssugestions_;
}
inline ::guru::ParticipantsSuggestions* MatchupState::mutable_participantssugestions() {
  set_has_participantssugestions();
  if (participantssugestions_ == NULL) participantssugestions_ = new ::guru::ParticipantsSuggestions;
  return participantssugestions_;
}
inline ::guru::ParticipantsSuggestions* MatchupState::release_participantssugestions() {
  clear_has_participantssugestions();
  ::guru::ParticipantsSuggestions* temp = participantssugestions_;
  participantssugestions_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guru

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matchupstate_2eproto__INCLUDED
